---
title: "dissertation new"
output:
  word_document: default
  pdf_document: default
date: "2023-07-31"
---

```{r setup, include=FALSE,warning=FALSE,message=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
loading the required Library
```{r  warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
library(ncdf4)
library(ggplot2)
library(viridis)
library(fields)
library(dplyr)
library(readr)
library(GGally)
library(stats)
library(tidyverse)
library(pROC)

```
ploting the whole region
```{r  warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
example <- nc_open('D:/dissertation/UQ_projects-main/Data/chemicals/20181103T0000Z_glm_anal.nc')
lon <- ncvar_get(example, varid = 'longitude')
lat <- ncvar_get(example, varid = 'latitude')
example_cs <- ncvar_get(example, varid = 'caesium_137_deposition')
nc_close(example)

grid <- expand.grid(lon, lat)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(example_cs[,,1]))

plot_data <- subset(plot_data, Cs > 0) 
plot_data$Location <- 1
for (t in 2:12){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(example_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 03/11/18 06:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

```
There are total of 54 file for input and output .Opening all the files one and one and storing it a csv file for required analysis.I do not need all the regions for i am shifting my focus only a particular region,region 8



#####################1st simulation###############

output file 

```{r  warning=FALSE,message=FALSE ,fig.keep='none',results='hide'}
# for output file
example <- nc_open("D:/dissertation/UQ_projects-main/Data/chemicals/20181103T0000Z_glm_anal.nc")
example # shows information about all the variables stored within the file
lonout <- ncvar_get(example, varid = 'longitude')
latout <- ncvar_get(example, varid = 'latitude')
example_cs <- ncvar_get(example, varid = 'caesium_137_deposition')
nc_close(example)

dim(example_cs)
loc1 <- example_cs[,,8]
#loc1


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(example_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(example_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 03/11/18 06:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

```
input for 0000 hr and 1200hr
```{r  warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim1_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181103T0000Z_glm_anal.nc")
sim_1_0_cs <- ncvar_get(sim1_0, varid = 'caesium_137_deposition')
nc_close(sim1_0)

newsim_1_0_cs <- sim_1_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
dim(newsim_1_0_cs)

lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
dim(grid)

length(c(newsim_1_0_cs[,]))

colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(newsim_1_0_cs[,]))
head(plot_data)

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  #facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 03/11/18 0000',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(newsim_1_0_cs)


#####for a single location
sim1_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181103T0000Z_glm_anal.nc")
sim_1_0_cs <- ncvar_get(sim1_0, varid = 'caesium_137_deposition')
nc_close(sim1_0)

newsim_1_0_cs <- sim_1_0_cs[which(lonout >= -5 & lonout <= -4), which(latout >= 50 & latout <= 51),8]
dim(newsim_1_0_cs)

lon_ind <- which(lonout >= -5 & lonout <= -4)
lat_ind <- which(latout >=50 & latout <=51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
dim(grid)

length(c(newsim_1_0_cs[,]))

colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(newsim_1_0_cs[,]))
head(plot_data)

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  #facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 03/11/18 0000',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

#df_loc[1,"meancsloc"] <- data.frame(meancsloc = mean(newsim_1_0_cs))
#df_loc

####
#mean_df[1,"meancs"] <- data.frame(meancs = mean(newsim_1_0_cs))
#mean_df

#max_loc[1,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_1_0_cs))
#max_loc 
#1200 output

sim2_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181103T1200Z_glm_anal.nc")
sim_2_0_cs <- ncvar_get(sim2_0, varid = 'caesium_137_deposition')
nc_close(sim2_0)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_2_0_cs[,,8]))


plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_2_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 04/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_2_0_cs)

mean(sim_2_0_cs)

#df_loc[2,"meancsloc"] <- data.frame(meancsloc = mean(newsim_1_12_cs))
#df_loc
#max_loc[2,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_1_12_cs))
#max_loc 
########
#mean_df[2,"meancs"] <- data.frame(meancs = mean(newsim_1_12_cs))
#mean_df

```


#######2nd simulation############

Input for 1 st file
for 0000 and 1200
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
latin <- readRDS("D:/dissertation/input for the data met/lat.rds")
lonin <- readRDS("D:/dissertation/input for the data met/lon.rds")
dim(latin)

MO201811030000 <- readRDS("D:/dissertation/input for the data met/MO201811030000.rds")
summary(latin)
summary(lonin)
summary(MO201811030000)
image.plot(lonin,latin,MO201811030000[,,1])

# selecting a particular latitude and longitude
#Taking mean and appllying on each are
newMO201811030000 <- MO201811030000[360:380,50:60,1:21]
MO201811030000_mean <- apply(newMO201811030000, 3, mean, na.rm = TRUE)
saveRDS(MO201811030000_mean,file = "D:/dissertation/rds for input/MO201811030000_mean.rds")
object <- readRDS('D:/dissertation/rds for input/MO201811030000_mean.rds')





# plot for 1200hrs
MO201811031200 <- readRDS("D:/dissertation/input for the data met/MO201811031200.rds")
image.plot(lonin,latin,MO201811031200[,,1])
summary(MO201811031200)

newMO201811031200 <- MO201811031200[360:380,50:60,1:21]
MO201811031200_mean <- apply(newMO201811031200, 3, mean, na.rm = TRUE)
saveRDS(MO201811031200_mean,file = "D:/dissertation/rds for input/MO201811031200_mean.rds")
object <- readRDS('D:/dissertation/rds for input/MO201811031200_mean.rds')

```

taking the 2nd file for input for 0000 and 1200
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
MO201811040000 <- readRDS("D:/dissertation/input for the data met/MO201811040000.rds")
image.plot(lonin,latin,MO201811040000[,,1])
summary(MO201811040000)

summary(MO201811040000[360:380,50:60,1:21])
newMO201811040000 <- MO201811040000[360:380,50:60,1:21]
image.plot(lonin[360:380], latin[50:60], newMO201811040000[,,1])
MO201811040000_mean <- apply(newMO201811040000, 3, mean, na.rm = TRUE)
summary(MO201811040000_mean)

saveRDS(MO201811040000_mean,file = "D:/dissertation/rds for input/MO201811040000_mean.rds")
object <- readRDS('D:/dissertation/rds for input/MO201811040000_mean.rds')
summary(object)

#1200 hrs
MO201811041200 <- readRDS("D:/dissertation/input for the data met/MO201811041200.rds")
image.plot(lonin,latin,MO201811041200[,,1])
summary(MO201811041200)
summary(MO201811041200[360:380,50:60,1:4])
dim(MO201811041200[360:380,50:60,1:4])
newMO201811041200 <- MO201811041200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811041200[,,1])
file_path <- "D:/dissertation/csv files for input/newMO201811041200.csv"
#write.csv(newMO201811041200, file = file_path, row.names = FALSE)
newMO201811041200 <- MO201811041200[360:380,50:60,1:21]
MO201811041200_mean <- apply(newMO201811041200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811041200_mean,file = "D:/dissertation/rds for input/MO201811041200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811041200_mean.rds')



```

Output of the 2nd output
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
#########output file ########
###0000 hrs ######
sim2_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T0000Z_glm_anal.nc")
sim_2_0_cs <- ncvar_get(sim2_0, varid = 'caesium_137_deposition')
nc_close(sim2_0)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_2_0_cs[,,8]))


plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_2_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 04/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_2_0_cs)

mean(sim_2_0_cs)

# for specific latitude and longitude square
sim2_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T0000Z_glm_anal.nc")
sim_2_0_cs <- ncvar_get(sim2_0, varid = 'caesium_137_deposition')
nc_close(sim2_0)

newsim_2_0_cs <- sim_2_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
dim(newsim_2_0_cs)

lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
dim(grid)

length(c(newsim_2_0_cs[,]))

colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(newsim_2_0_cs[,]))
ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  #facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 04/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(newsim_2_0_cs)
#mean_df[3,"meancs"] <- data.frame(meancs = mean(newsim_2_0_cs))
#mean_df
# for a particular location 

#max_loc[3,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_2_0_cs))
#max_loc

sim2_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T0000Z_glm_anal.nc")
sim_2_0_cs <- ncvar_get(sim2_0, varid = 'caesium_137_deposition')
nc_close(sim2_0)

newsim_2_0_cs <- sim_2_0_cs[which(lonout >= -5 & lonout <= -4), which(latout >= 60 & latout <= 61),8]
dim(newsim_2_0_cs)

lon_ind <- which(lonout >= -5 & lonout <= -4)
lat_ind <- which(latout >= 60 & latout <= 61)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
dim(grid)

length(c(newsim_2_0_cs[,]))

colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(newsim_2_0_cs[,]))

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  #facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 04/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)


#df_loc[3,"meancsloc"] <- data.frame(meancsloc = mean(newsim_2_0_cs))
#df_loc
```
1200 hrs
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim2_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T1200Z_glm_anal.nc")
sim_2_12_cs <- ncvar_get(sim2_12, varid = 'caesium_137_deposition')
nc_close(sim2_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_2_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_2_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 04/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_2_12_cs)



newsim_2_12_cs <- sim_2_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[4, "meancs"] <- data.frame(meancs = mean(newsim_2_12_cs))
#mean_df

#max_loc[4,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_2_12_cs))
#max_loc


#######particular location

newsim_2_12_cs <- sim_2_12_cs[which(lonout >= 0& lonout <= 1), which(latout >= 65 & latout <= 66),8]
lon_ind <- which(lonout >= 0 & lonout <= 1)
lat_ind <- which(latout >= 65 & latout <= 66)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[4, "meancsloc"] <- data.frame(meancsloc = mean(newsim_2_12_cs))
#df_loc
```

##############3rd simulation#####################3

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs

############### 3nd simulation ##################
#### 2018 11 05 #####
# input file 
#0000 hrs
MO201811050000 <- readRDS("D:/dissertation/input for the data met/MO201811050000.rds")
image.plot(lonin,latin,MO201811050000[,,1])
summary(MO201811050000)


summary(MO201811050000[360:380,50:60,1:4])
newMO201811050000 <- MO201811050000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811050000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811050000.csv"
#write.csv(newMO201811050000, file = file_path, row.names = FALSE)


newMO201811050000 <- MO201811050000[360:380,50:60,1:21]
MO201811050000_mean <- apply(newMO201811050000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811050000_mean,file = "D:/dissertation/rds for input/MO201811050000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811050000_mean.rds')



#1200 hrs

#1200 hrs
MO201811051200 <- readRDS("D:/dissertation/input for the data met/MO201811051200.rds")
image.plot(lonin,latin,MO201811051200[,,1])
summary(MO201811051200)



summary(MO201811051200[360:380,50:60,1:4])
newMO201811051200 <- MO201811051200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811051200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811051200.csv"
#write.csv(newMO201811051200, file = file_path, row.names = FALSE)


newMO201811051200 <- MO201811051200[360:380,50:60,1:21]
MO201811051200_mean <- apply(newMO201811051200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811051200_mean,file = "D:/dissertation/rds for input/MO201811051200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811051200_mean.rds')




```

3rd output 0000 hrs
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#########output file ########
###0000 hrs ######
sim3_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181105T0000Z_glm_anal.nc")
sim_3_0_cs <- ncvar_get(sim3_0, varid = 'caesium_137_deposition')
nc_close(sim3_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_3_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_3_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 05/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_3_0_cs)

newsim_3_0_cs <- sim_3_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[5, "meancs"] <- data.frame(meancs = mean(newsim_3_0_cs))
#mean_df

#max_loc[5, "meancsloc"] <- data.frame(maxcsloc = mean(newsim_3_0_cs))
#max_loc
#####particular location
newsim_3_0_cs <- sim_3_0_cs[which(lonout >= -10 & lonout <= -9), which(latout >= 65 & latout <= 66),8]
lon_ind <- which(lonout >= -10 & lonout <= -9)
lat_ind <- which(latout >= 65 & latout <= 66)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[5, "meancsloc"] <- data.frame(meancsloc = mean(newsim_3_0_cs))
#df_loc
```
1200 hrs

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide' }
sim3_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181105T1200Z_glm_anal.nc")
sim_3_12_cs <- ncvar_get(sim3_12, varid = 'caesium_137_deposition')
nc_close(sim2_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_3_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_3_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 05/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_3_12_cs)

newsim_3_12_cs <- sim_3_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[6, "meancs"] <- data.frame(meancs = mean(newsim_3_12_cs))
#mean_df


#####particular locartion
newsim_3_12_cs <- sim_3_12_cs[which(lonout >= 0 & lonout <= 1), which(latout >= 50 & latout <= 51),8]
lon_ind <- which(lonout >= 0 & lonout <= 1)
lat_ind <- which(latout >= 50 & latout <= 51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[6, "meancsloc"] <- data.frame(meancsloc = mean(newsim_3_12_cs))
#df_loc

#max_loc[6,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_3_12_cs))
#max_loc
```

###############4th simulation#####################
input 0000 and 1200
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
# input file 
#0000 hrs
MO201811060000 <- readRDS("D:/dissertation/input for the data met/MO201811060000.rds")
image.plot(lonin,latin,MO201811060000[,,1])
summary(MO201811060000)

summary(MO201811060000[360:380,50:60,1:4])
newMO201811060000 <- MO201811060000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811060000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811060000.csv"
#write.csv(newMO201811060000, file = file_path, row.names = FALSE)


newMO201811060000 <- MO201811060000[360:380,50:60,1:21]
MO201811060000_mean <- apply(newMO201811060000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811060000_mean,file = "D:/dissertation/rds for input/MO201811060000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811060000_mean.rds')

#1200
MO201811061200 <- readRDS("D:/dissertation/input for the data met/MO201811061200.rds")
image.plot(lonin,latin,MO201811061200[,,1])
summary(MO201811061200)

summary(MO201811061200[360:380,50:60,1:4])
newMO201811061200 <- MO201811061200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811061200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811061200.csv"
#write.csv(newMO201811061200, file = file_path, row.names = FALSE)


newMO201811061200 <- MO201811061200[360:380,50:60,1:21]
MO201811061200_mean <- apply(newMO201811061200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811061200_mean,file = "D:/dissertation/rds for input/MO201811061200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811061200_mean.rds')



```

output 0000 hrs
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim4_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181106T0000Z_glm_anal.nc")
sim_4_0_cs <- ncvar_get(sim4_0, varid = 'caesium_137_deposition')
nc_close(sim4_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_4_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_4_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 06/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_4_0_cs)

newsim_4_0_cs <- sim_4_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[7, "meancs"] <- data.frame(meancs = mean(newsim_4_0_cs))
#mean_df


#####particular location#####
newsim_4_0_cs <- sim_4_0_cs[which(lonout >= -4 & lonout <= -3), which(latout >= 50 & latout <= 51),8]
lon_ind <- which(lonout >= -4 & lonout <= -3)
lat_ind <- which(latout >= 50 & latout <= 51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[7, "meancsloc"] <- data.frame(meancsloc = mean(newsim_4_0_cs))
#df_loc

#max_loc[7,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_4_0_cs))
#max_loc
```
1200 hrs output file
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim4_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181106T1200Z_glm_anal.nc")
sim_4_12_cs <- ncvar_get(sim4_12, varid = 'caesium_137_deposition')
nc_close(sim4_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_4_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_4_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 06/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_4_12_cs)

newsim_4_12_cs <- sim_4_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[8, "meancs"] <- data.frame(meancs = mean(newsim_4_12_cs))
#mean_df

#max_loc[8,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_4_12_cs))
#max_loc

####new location###
newsim_4_12_cs <- sim_4_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[8, "meancsloc"] <- data.frame(meancsloc = mean(newsim_4_12_cs))
#df_loc
```

############### 5 simulation ##################
#### 2018 11 07 #####
input file for 0000 and 1200 hrs
```{r warning=FALSE,message=FALSE,fig.keep='none' ,results='hide'}
#0000 hrs
MO201811070000 <- readRDS("D:/dissertation/input for the data met/MO201811070000.rds") 
image.plot(lonin,latin,MO201811070000[,,1])
#summary(MO201811070000)

summary(MO201811070000[360:380,50:60,1:4])
newMO201811070000 <- MO201811070000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811070000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811070000.csv"
#write.csv(newMO201811070000, file = file_path, row.names = FALSE)


newMO201811070000 <- MO201811070000[360:380,50:60,1:21]
MO201811070000_mean <- apply(newMO201811070000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811070000_mean,file = "D:/dissertation/rds for input/MO201811070000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811070000_mean.rds')


#1200 hrs
MO201811071200 <- readRDS("D:/dissertation/input for the data met/MO201811071200.rds")
image.plot(lonin,latin,MO201811071200[,,1])
summary(MO201811071200)

summary(MO201811071200[360:380,50:60,1:4])
newMO201811071200 <- MO201811071200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811071200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811071200.csv"
#write.csv(newMO201811071200, file = file_path, row.names = FALSE)


newMO201811071200 <- MO201811071200[360:380,50:60,1:21]
MO201811071200_mean <- apply(newMO201811071200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811071200_mean,file = "D:/dissertation/rds for input/MO201811071200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811071200_mean.rds')



```

Output files 0000hrs
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
###0000 hrs ######
sim5_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181107T0000Z_glm_anal.nc")
sim_5_0_cs <- ncvar_get(sim5_0, varid = 'caesium_137_deposition')
nc_close(sim5_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_5_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_5_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 07/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_5_0_cs)

newsim_5_0_cs <- sim_5_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[9, "meancs"] <- data.frame(meancs = mean(newsim_5_0_cs))
#mean_df

###particualar loc###
newsim_5_0_cs <- sim_5_0_cs[which(lonout >= 0 & lonout <= 1), which(latout >= 53 & latout <= 54),8]
lon_ind <- which(lonout >= 0 & lonout <= 1)
lat_ind <- which(latout >= 53 & latout <= 54)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[9, "meancsloc"] <- data.frame(meancsloc = mean(newsim_5_0_cs))
#df_loc

#max_loc[9,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_5_0_cs))
#max_loc

```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim5_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181107T1200Z_glm_anal.nc")
sim_5_12_cs <- ncvar_get(sim2_12, varid = 'caesium_137_deposition')
nc_close(sim5_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_5_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_5_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 07/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_5_12_cs)

newsim_5_12_cs <- sim_5_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[10, "meancs"] <- data.frame(meancs = mean(newsim_5_12_cs))
#mean_df

####particular location######
newsim_5_12_cs <- sim_5_12_cs[which(lonout >= -5 & lonout <= -4), which(latout >= 50 & latout <= 51),8]
lon_ind <- which(lonout >= -5 & lonout <= -4)
lat_ind <- which(latout >= 50 & latout <= 51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[10, "meancsloc"] <- data.frame(meancsloc = mean(newsim_5_12_cs))
#df_loc

#max_loc[10,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_5_12_cs))
#max_loc
```

##################################################
############### 6 simulation ##################
#### 2018 11 08 #####
# input file 

```{r warning=FALSE,message=FALSE,fig.keep='none' ,results='hide'}
#0000 hrs
MO201811080000 <- readRDS("D:/dissertation/input for the data met/MO201811080000.rds")
image.plot(lonin,latin,MO201811080000[,,1])
summary(MO201811080000)


summary(MO201811080000[360:380,50:60,1:4])
newMO201811080000 <- MO201811080000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811080000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811080000.csv"
#write.csv(newMO201811080000, file = file_path, row.names = FALSE)


newMO201811080000 <- MO201811080000[360:380,50:60,1:21]
MO201811080000_mean <- apply(newMO201811080000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811080000_mean,file = "D:/dissertation/rds for input/MO201811080000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811080000_mean.rds')

#1200

#1200 hrs
MO201811081200 <- readRDS("D:/dissertation/input for the data met/MO201811081200.rds")
image.plot(lonin,latin,MO201811081200[,,1])
summary(MO201811081200)

summary(MO201811081200[360:380,50:60,1:4])
newMO201811081200 <- MO201811081200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811081200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811081200.csv"
#write.csv(newMO201811081200, file = file_path, row.names = FALSE)


newMO201811081200 <- MO201811081200[360:380,50:60,1:21]
MO201811081200_mean <- apply(newMO201811081200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811081200_mean,file = "D:/dissertation/rds for input/MO201811081200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811081200_mean.rds')


```
#########output file ########
###0000 hrs ######
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim6_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181108T0000Z_glm_anal.nc")
sim_6_0_cs <- ncvar_get(sim6_0, varid = 'caesium_137_deposition')
nc_close(sim6_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_6_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_6_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 08/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_6_0_cs)


newsim_6_0_cs <- sim_6_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[11, "meancs"] <- data.frame(meancs = mean(newsim_6_0_cs))
#mean_df

#max_loc[11,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_6_0_cs))
#max_loc

###particluar location

newsim_6_0_cs <- sim_6_0_cs[which(lonout >= -2 & lonout <= -1), which(latout >= 54 & latout <= 55),8]
lon_ind <- which(lonout >= -2 & lonout <= -1)
lat_ind <- which(latout >= 54 & latout <= 55)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[11, "meancsloc"] <- data.frame(meancsloc = mean(newsim_6_0_cs))
#df_loc
```

#1200
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim6_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181108T1200Z_glm_anal.nc")
sim_6_12_cs <- ncvar_get(sim6_12, varid = 'caesium_137_deposition')
nc_close(sim6_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_6_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_6_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 08/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_6_12_cs)

newsim_6_12_cs <- sim_6_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[12, "meancs"] <- data.frame(meancs = mean(newsim_6_12_cs))
#mean_df

####particular location
newsim_6_12_cs <- sim_6_12_cs[which(lonout >= -2 & lonout <= -1), which(latout >= 56 & latout <= 57),8]
lon_ind <- which(lonout >= -2 & lonout <= -1)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[12, "meancsloc"] <- data.frame(meancsloc = mean(newsim_6_12_cs))
#df_loc
#####

#max_loc[12,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_6_12_cs))
#max_loc
```
##################################################
############### 7 simulation ##################
#### 2018 11 09 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811090000 <- readRDS("D:/dissertation/input for the data met/MO201811090000.rds")
image.plot(lonin,latin,MO201811090000[,,1])
summary(MO201811090000)

summary(MO201811090000[360:380,50:60,1:4])
newMO201811090000 <- MO201811090000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811090000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811090000.csv"
#write.csv(newMO201811090000, file = file_path, row.names = FALSE)


newMO201811090000 <- MO201811090000[360:380,50:60,1:21]
MO201811090000_mean <- apply(newMO201811090000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811090000_mean,file = "D:/dissertation/rds for input/MO201811090000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811090000_mean.rds')


#1200 hrs
MO201811091200 <- readRDS("D:/dissertation/input for the data met/MO201811091200.rds")
image.plot(lonin,latin,MO201811091200[,,1])
summary(MO201811091200)

summary(MO201811091200[360:380,50:60,1:4])
newMO201811091200 <- MO201811091200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811091200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811091200.csv"
#write.csv(newMO201811091200, file = file_path, row.names = FALSE)


newMO201811091200 <- MO201811091200[360:380,50:60,1:21]
MO201811091200_mean <- apply(newMO201811091200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811091200_mean,file = "D:/dissertation/rds for input/MO201811091200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811091200_mean.rds')

```

output 0000 hrs
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#########output file ########
###0000 hrs ######
sim7_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181109T0000Z_glm_anal.nc")
sim_7_0_cs <- ncvar_get(sim7_0, varid = 'caesium_137_deposition')
nc_close(sim7_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_7_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_7_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 09/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_7_0_cs)

newsim_7_0_cs <- sim_7_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[13, "meancs"] <- data.frame(meancs = mean(newsim_7_0_cs))
#mean_df

#particular location
newsim_7_0_cs <- sim_7_0_cs[which(lonout >= -2 & lonout <= -1), which(latout >= 57 & latout <= 58),8]
lon_ind <- which(lonout >= -2 & lonout <= -1)
lat_ind <- which(latout >= 57 & latout < 58)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[13, "meancsloc"] <- data.frame(meancsloc = mean(newsim_7_0_cs))
#df_loc

#max_loc[13,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_7_0_cs))
#max_loc

```

#1200 hrs
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim7_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181109T1200Z_glm_anal.nc")
sim_7_12_cs <- ncvar_get(sim7_12, varid = 'caesium_137_deposition')
nc_close(sim7_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_7_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_7_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 09/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_7_12_cs)

newsim_7_12_cs <- sim_7_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[14, "meancs"] <- data.frame(meancs = mean(newsim_7_12_cs))
#mean_df

#max_loc[14,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_7_12_cs))
#max_loc

#particluar loaction


sim7_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181109T1200Z_glm_anal.nc")
sim_7_12_cs <- ncvar_get(sim7_12, varid = 'caesium_137_deposition')
nc_close(sim7_12)

newsim_7_12_cs <- sim_7_12_cs[which(lonout >= 10 & lonout <= 11), which(latout >= 55 & latout <= 56),8]
dim(newsim_7_12_cs)

lon_ind <- which(lonout >= 10 & lonout <= 11)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
dim(grid)

length(c(newsim_7_12_cs[,]))

colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(newsim_7_12_cs[,]))
#head(plot_data)

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  #facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 03/11/18 1200',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)




newsim_7_12_cs <- sim_7_12_cs[which(lonout >= 10 & lonout <= 11), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 10  & lonout <= 11)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[14, "meancsloc"] <- data.frame(meancsloc = mean(newsim_7_12_cs))
#df_loc
```

############### 8 simulation ##################
#### 2018 11 10 #####
# input file 
#0000 hrs
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
MO201811100000 <- readRDS("D:/dissertation/input for the data met/MO201811100000.rds")
image.plot(lonin,latin,MO201811100000[,,1])
#summary(MO201811100000)

summary(MO201811100000[360:380,50:60,1:4])
newMO201811100000 <- MO201811100000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811100000[,,1])
file_path <- "D:/dissertation/csv files for input/newMO201811100000.csv"
#write.csv(newMO201811100000, file = file_path, row.names = FALSE)

newMO201811100000 <- MO201811100000[360:380,50:60,1:21]
MO201811100000_mean <- apply(newMO201811100000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811100000_mean,file = "D:/dissertation/rds for input/MO201811100000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811100000_mean.rds')


#1200 hrs
MO201811101200 <- readRDS("D:/dissertation/input for the data met/MO201811101200.rds")
image.plot(lonin,latin,MO201811101200[,,1])
summary(MO201811101200)

summary(MO201811101200[360:380,50:60,1:4])
newMO201811101200 <- MO201811101200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811101200[,,1])
file_path <- "D:/dissertation/csv files for input/newMO201811101200.csv"
write.csv(newMO201811101200, file = file_path, row.names = FALSE)

newMO201811101200 <- MO201811101200[360:380,50:60,1:21]
MO201811101200_mean <- apply(newMO201811101200, 3, mean, na.rm = TRUE)
saveRDS(MO201811101200_mean,file = "D:/dissertation/rds for input/MO201811101200_mean.rds")
object <- readRDS('D:/dissertation/rds for input/MO201811101200_mean.rds')



```
########output file ########
0000
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
###0000 hrs ######
sim8_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181110T0000Z_glm_anal.nc")
sim_8_0_cs <- ncvar_get(sim8_0, varid = 'caesium_137_deposition')
nc_close(sim8_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_8_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_8_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 10/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_8_0_cs)

newsim_8_0_cs <- sim_8_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[15, "meancs"] <- data.frame(meancs = mean(newsim_8_0_cs))
#mean_df

#particular location
newsim_8_0_cs <- sim_8_0_cs[which(lonout >= 11 & lonout <= 12), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 11 & lonout <= 12)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[15, "meancsloc"] <- data.frame(meancsloc = mean(newsim_8_0_cs))
#df_loc

#max_loc[15,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_8_0_cs))
#max_loc
```

#1200
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim8_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181110T1200Z_glm_anal.nc")
sim_8_12_cs <- ncvar_get(sim8_12, varid = 'caesium_137_deposition')
nc_close(sim8_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_8_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_8_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 10/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_8_12_cs)

newsim_8_12_cs <- sim_8_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[16, "meancs"] <- data.frame(meancs = mean(newsim_8_12_cs))
#mean_df

#particular location
newsim_8_12_cs <- sim_8_12_cs[which(lonout >= 15 & lonout <= 16), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 15 & lonout <= 16)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[16, "meancsloc"] <- data.frame(meancsloc = mean(newsim_8_12_cs))
#df_loc

#max_loc[16,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_8_12_cs))
#max_loc

```

############### 9 simulation ##################
#### 2018 11 11 #####
# input file 

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811110000 <- readRDS("D:/dissertation/input for the data met/MO201811110000.rds")
image.plot(lonin,latin,MO201811110000[,,1])
summary(MO201811110000)

summary(MO201811110000[360:380,50:60,1:4])
newMO201811110000 <- MO201811110000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811110000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811110000.csv"
#write.csv(newMO201811110000, file = file_path, row.names = FALSE)

newMO201811110000 <- MO201811110000[360:380,50:60,1:21]
MO201811110000_mean <- apply(newMO201811110000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811110000_mean,file = "D:/dissertation/rds for input/MO201811110000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811110000_mean.rds')

#1200
MO201811111200 <- readRDS("D:/dissertation/input for the data met/MO201811111200.rds")
image.plot(lonin,latin,MO201811111200[,,1])
summary(MO201811111200)

summary(MO201811111200[360:380,50:60,1:4])
newMO201811111200 <- MO201811111200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811111200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811111200.csv"
#write.csv(newMO201811111200, file = file_path, row.names = FALSE)

newMO201811111200 <- MO201811111200[360:380,50:60,1:21]
MO201811111200_mean <- apply(newMO201811111200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811111200_mean,file = "D:/dissertation/rds for input/MO201811111200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811111200_mean.rds')



```
#########output file ########
###0000 hrs ######
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim9_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181111T0000Z_glm_anal.nc")
sim_9_0_cs <- ncvar_get(sim9_0, varid = 'caesium_137_deposition')
nc_close(sim9_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_9_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_9_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 11/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_9_0_cs)

newsim_9_0_cs <- sim_9_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[17, "meancs"] <- data.frame(meancs = mean(newsim_9_0_cs))
#mean_df

#max_loc[17,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_9_0_cs))
#max_loc

#particular location
newsim_9_0_cs <- sim_9_0_cs[which(lonout >= 14  & lonout <= 15), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 14 & lonout <= 15  )
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[17, "meancsloc"] <- data.frame(meancsloc = mean(newsim_9_0_cs))
#df_loc

```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim9_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181111T1200Z_glm_anal.nc")
sim_9_12_cs <- ncvar_get(sim9_12, varid = 'caesium_137_deposition')
nc_close(sim9_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_9_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_9_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 11/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_9_12_cs)

newsim_9_12_cs <- sim_9_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[18, "meancs"] <- data.frame(meancs = mean(newsim_9_12_cs))
#mean_df

#max_loc[18,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_9_12_cs))
#max_loc

#particular location

newsim_9_12_cs <- sim_9_12_cs[which(lonout >= 13 & lonout <= 14), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >=  13 & lonout <= 14)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[18, "meancsloc"] <- data.frame(meancsloc = mean(newsim_9_12_cs))
#df_loc

```


############### 10 simulation ##################
#### 2018 11 12 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811120000 <- readRDS("D:/dissertation/input for the data met/MO201811120000.rds")
image.plot(lonin,latin,MO201811120000[,,1])
summary(MO201811120000)

summary(MO201811120000[360:380,50:60,1:4])
newMO201811120000 <- MO201811120000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811120000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811120000.csv"
#write.csv(newMO201811120000, file = file_path, row.names = FALSE)


newMO201811120000 <- MO201811120000[360:380,50:60,1:21]
MO201811120000_mean <- apply(newMO201811120000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811120000_mean,file = "D:/dissertation/rds for input/MO201811120000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811120000_mean.rds')

#1200 hrs
MO201811121200 <- readRDS("D:/dissertation/input for the data met/MO201811121200.rds")
image.plot(lonin,latin,MO201811121200[,,1])
summary(MO201811121200)

summary(MO201811121200[360:380,50:60,1:4])
newMO201811121200 <- MO201811121200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811121200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811121200.csv"
#write.csv(newMO201811121200, file = file_path, row.names = FALSE)

newMO201811121200 <- MO201811121200[360:380,50:60,1:21]
MO201811121200_mean <- apply(newMO201811121200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811121200_mean,file = "D:/dissertation/rds for input/MO201811121200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811121200_mean.rds')

```
output for 0000
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim10_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181112T0000Z_glm_anal.nc")
sim_10_0_cs <- ncvar_get(sim10_0, varid = 'caesium_137_deposition')
nc_close(sim10_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_10_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_10_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 12/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_10_0_cs)


newsim_10_0_cs <- sim_10_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[19, "meancs"] <- data.frame(meancs = mean(newsim_10_0_cs))
#mean_df

#max_loc[19,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_10_0_cs))
#max_loc

#particular location
newsim_10_0_cs <- sim_10_0_cs[which(lonout >= 19 & lonout <= 20), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 19 & lonout <= 20)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[19, "meancsloc"] <- data.frame(meancsloc = mean(newsim_10_0_cs))
#df_loc
```

#1200
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim10_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181112T1200Z_glm_anal.nc")
sim_10_12_cs <- ncvar_get(sim10_12, varid = 'caesium_137_deposition')
nc_close(sim10_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_10_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_10_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 12/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_10_12_cs)

newsim_10_12_cs <- sim_10_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[20, "meancs"] <- data.frame(meancs = mean(newsim_10_12_cs))
#mean_df

#particular location
newsim_10_12_cs <- sim_10_12_cs[which(lonout >= -6 & lonout <= -5), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout > -6 & lonout <= -5)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[20, "meancsloc"] <- data.frame(meancsloc = mean(newsim_10_12_cs))
#df_loc

#max_loc[20,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_10_12_cs))
#max_loc
```
############### 11 simulation ##################
#### 2018 11 13 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811130000 <- readRDS("D:/dissertation/input for the data met/MO201811130000.rds")
image.plot(lonin,latin,MO201811130000[,,1])
summary(MO201811130000)

summary(MO201811130000[360:380,50:60,1:4])
newMO201811130000 <- MO201811130000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811130000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811130000.csv"
#write.csv(newMO201811130000, file = file_path, row.names = FALSE)

newMO201811130000 <- MO201811130000[360:380,50:60,1:21]
MO201811130000_mean <- apply(newMO201811130000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811130000_mean,file = "D:/dissertation/rds for input/MO201811130000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811130000_mean.rds')

#1200 hrs
MO201811131200 <- readRDS("D:/dissertation/input for the data met/MO201811131200.rds")
image.plot(lonin,latin,MO201811131200[,,1])
summary(MO201811131200)

summary(MO201811131200[360:380,50:60,1:4])
newMO201811131200 <- MO201811131200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811131200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811131200.csv"
#write.csv(newMO201811131200, file = file_path, row.names = FALSE)


newMO201811131200 <- MO201811131200[360:380,50:60,1:21]
MO201811131200_mean <- apply(newMO201811131200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811131200_mean,file = "D:/dissertation/rds for input/MO201811131200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811131200_mean.rds')

```

#########output file ########
###0000 hrs ######
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim11_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181113T0000Z_glm_anal.nc")
sim_11_0_cs <- ncvar_get(sim11_0, varid = 'caesium_137_deposition')
nc_close(sim11_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_11_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_11_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 12/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_11_0_cs)

newsim_11_0_cs <- sim_11_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[21, "meancs"] <- data.frame(meancs = mean(newsim_11_0_cs))
#mean_df

#particular location
newsim_11_0_cs <- sim_11_0_cs[which(lonout >= 10 & lonout <= 11), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 10 & lonout <= 11)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[21, "meancsloc"] <- data.frame(meancsloc = mean(newsim_11_0_cs))
#df_loc

#max_loc[21,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_11_0_cs))
#max_loc
```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim11_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181113T1200Z_glm_anal.nc")
sim_11_12_cs <- ncvar_get(sim11_12, varid = 'caesium_137_deposition')
nc_close(sim11_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_11_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_11_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 13/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_11_12_cs)

newsim_11_12_cs <- sim_11_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[22, "meancs"] <- data.frame(meancs = mean(newsim_11_12_cs))
#mean_df

#max_loc[22,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_11_12_cs))
#max_loc

#particlar 
newsim_11_12_cs <- sim_11_12_cs[which(lonout >= 18 & lonout <= 19), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 18 & lonout <= 19)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[22, "meancsloc"] <- data.frame(meancsloc = mean(newsim_11_12_cs))
#df_loc
```

############### 12 simulation ##################
#### 2018 11 14 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811140000 <- readRDS("D:/dissertation/input for the data met/MO201811140000.rds")
image.plot(lonin,latin,MO201811140000[,,1])
summary(MO201811140000)

summary(MO201811140000[360:380,50:60,1:4])
newMO201811140000 <- MO201811140000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811140000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811140000.csv"
#write.csv(newMO201811140000, file = file_path, row.names = FALSE)


newMO201811140000 <- MO201811140000[360:380,50:60,1:21]
MO201811140000_mean <- apply(newMO201811140000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811140000_mean,file = "D:/dissertation/rds for input/MO201811140000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811140000_mean.rds')

#1200 hrs
MO201811141200 <- readRDS("D:/dissertation/input for the data met/MO201811141200.rds")
image.plot(lonin,latin,MO201811141200[,,1])
summary(MO201811141200)

summary(MO201811141200[360:380,50:60,1:4])
newMO201811141200 <- MO201811141200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811141200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811141200.csv"
#write.csv(newMO201811141200, file = file_path, row.names = FALSE)


newMO201811141200 <- MO201811141200[360:380,50:60,1:21]
MO201811141200_mean <- apply(newMO201811141200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811141200_mean,file = "D:/dissertation/rds for input/MO201811141200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811141200_mean.rds')



```

#########output file ########
###0000 hrs ######
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim12_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181114T0000Z_glm_anal.nc")
sim_12_0_cs <- ncvar_get(sim12_0, varid = 'caesium_137_deposition')
nc_close(sim12_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_12_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_12_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 14/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_11_0_cs)

newsim_12_0_cs <- sim_12_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[23, "meancs"] <- data.frame(meancs = mean(newsim_12_0_cs))
#mean_df

#particular loaction
newsim_12_0_cs <- sim_12_0_cs[which(lonout >= 4 & lonout <= 5), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 4 & lonout <= 5)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[23, "meancsloc"] <- data.frame(meancsloc = mean(newsim_12_0_cs))
#df_loc

#max_loc[23,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_12_0_cs))
#max_loc
#


```
1200 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim12_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181114T1200Z_glm_anal.nc")
sim_12_12_cs <- ncvar_get(sim12_12, varid = 'caesium_137_deposition')
nc_close(sim12_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_12_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_12_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 14/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_12_12_cs)

newsim_12_12_cs <- sim_12_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[24, "meancs"] <- data.frame(meancs = mean(newsim_12_12_cs))
#mean_df

#max_loc[24,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_12_12_cs))
#max_loc

#particular location
newsim_12_12_cs <- sim_12_12_cs[which(lonout >= 7 & lonout <= 8), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 7 & lonout <= 8)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[24, "meancsloc"] <- data.frame(meancsloc = mean(newsim_12_12_cs))
#df_loc
```

##################################################
############### 13 simulation ##################
#### 2018 11 15 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811150000 <- readRDS("D:/dissertation/input for the data met/MO201811150000.rds")
image.plot(lonin,latin,MO201811150000[,,1])
summary(MO201811150000)

summary(MO201811150000[360:380,50:60,1:4])
newMO201811150000 <- MO201811150000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811150000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811150000.csv"
#write.csv(newMO201811150000, file = file_path, row.names = FALSE)

newMO201811150000 <- MO201811150000[360:380,50:60,1:21]
MO201811150000_mean <- apply(newMO201811150000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811150000_mean,file = "D:/dissertation/rds for input/MO201811150000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811150000_mean.rds')

#1200 hrs
MO201811151200 <- readRDS("D:/dissertation/input for the data met/MO201811151200.rds")
image.plot(lonin,latin,MO201811151200[,,1])
summary(MO201811151200)

summary(MO201811151200[360:380,50:60,1:4])
newMO201811151200 <- MO201811151200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811151200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811151200.csv"
#write.csv(newMO201811151200, file = file_path, row.names = FALSE)


newMO201811151200 <- MO201811151200[360:380,50:60,1:21]
MO201811151200_mean <- apply(newMO201811151200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811151200_mean,file = "D:/dissertation/rds for input/MO201811151200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811151200_mean.rds')

```
output
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
###0000 hrs ######
sim13_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181115T0000Z_glm_anal.nc")
sim_13_0_cs <- ncvar_get(sim13_0, varid = 'caesium_137_deposition')
nc_close(sim13_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_13_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_13_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 15/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_13_0_cs)

newsim_13_0_cs <- sim_13_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[25, "meancs"] <- data.frame(meancs = mean(newsim_13_0_cs))
#mean_df

#max_loc[25,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_13_0_cs))
#max_loc

#particular location

newsim_13_0_cs <- sim_13_0_cs[which(lonout >= 14 & lonout <= 15), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >=  14 & lonout <= 15)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[25, "meancsloc"] <- data.frame(meancsloc = mean(newsim_13_0_cs))
#df_loc
```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim13_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181115T1200Z_glm_anal.nc")
sim_13_12_cs <- ncvar_get(sim13_12, varid = 'caesium_137_deposition')
nc_close(sim13_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_13_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_13_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 15/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_13_12_cs)

newsim_13_12_cs <- sim_13_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[26, "meancs"] <- data.frame(meancs = mean(newsim_13_12_cs))
#mean_df


#max_loc[26,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_13_12_cs))
#max_loc

#particular loc

newsim_13_12_cs <- sim_13_12_cs[which(lonout >= 17 & lonout <= 18), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 17 & lonout <= 18)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[26, "meancsloc"] <- data.frame(meancsloc = mean(newsim_13_12_cs))
#df_loc
```

##################################################
############### 14 simulation ##################
#### 2018 11 16 #####
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
# input file 
#0000 hrs
MO201811160000 <- readRDS("D:/dissertation/input for the data met/MO201811160000.rds")
image.plot(lonin,latin,MO201811160000[,,1])
summary(MO201811160000)

summary(MO201811160000[360:380,50:60,1:4])
newMO201811160000 <- MO201811160000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811160000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811160000.csv"
#write.csv(newMO201811160000, file = file_path, row.names = FALSE)

newMO201811160000 <- MO201811160000[360:380,50:60,1:21]
MO201811160000_mean <- apply(newMO201811160000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811160000_mean,file = "D:/dissertation/rds for input/MO201811160000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811160000_mean.rds')


#1200 hrs
MO201811161200 <- readRDS("D:/dissertation/input for the data met/MO201811161200.rds")
image.plot(lonin,latin,MO201811161200[,,1])
summary(MO201811161200)

summary(MO201811161200[360:380,50:60,1:4])
newMO201811161200 <- MO201811161200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811161200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811161200.csv"
#write.csv(newMO201811161200, file = file_path, row.names = FALSE)

newMO201811161200 <- MO201811161200[360:380,50:60,1:21]
MO201811161200_mean <- apply(newMO201811161200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811161200_mean,file = "D:/dissertation/rds for input/MO201811161200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811161200_mean.rds')



```


```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#########output file ########
###0000 hrs ######
sim14_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181116T0000Z_glm_anal.nc")
sim_14_0_cs <- ncvar_get(sim14_0, varid = 'caesium_137_deposition')
nc_close(sim14_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_14_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_14_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 16/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_14_0_cs)

newsim_14_0_cs <- sim_14_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[27, "meancs"] <- data.frame(meancs = mean(newsim_14_0_cs))
#mean_df


#particular loc
newsim_14_0_cs <- sim_14_0_cs[which(lonout >= 3 & lonout <= 4), which(latout >= 57 & latout <= 58),8]
lon_ind <- which(lonout >= 3 & lonout <= 4)
lat_ind <- which(latout >= 57 & latout <= 58)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[27, "meancsloc"] <- data.frame(meancsloc = mean(newsim_14_0_cs))
#df_loc

#max_loc[27,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_14_0_cs))
#max_loc
```

#1200
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
sim14_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181116T1200Z_glm_anal.nc")
sim_14_12_cs <- ncvar_get(sim14_12, varid = 'caesium_137_deposition')
nc_close(sim13_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_14_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_14_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 16/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_14_12_cs)

newsim_14_12_cs <- sim_14_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[28, "meancs"] <- data.frame(meancs = mean(newsim_14_12_cs))
#mean_df
#max_loc[28,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_14_12_cs))
#max_loc

#particluar location
newsim_14_12_cs <- sim_14_12_cs[which(lonout >= -5 & lonout <= -4), which(latout >= 50 & latout <= 51),8]
lon_ind <- which(lonout >= -5 & lonout <= -4)
lat_ind <- which(latout >= 50 & latout <= 51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[28, "meancsloc"] <- data.frame(meancsloc = mean(newsim_14_12_cs))
#df_loc
```

############### 15 simulation ##################
#### 2018 11 17 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811170000 <- readRDS("D:/dissertation/input for the data met/MO201811170000.rds")
image.plot(lonin,latin,MO201811170000[,,1])
summary(MO201811170000)

summary(MO201811170000[360:380,50:60,1:4])
newMO201811170000 <- MO201811161200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811170000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811170000.csv"
#write.csv(newMO201811170000, file = file_path, row.names = FALSE)

newMO201811170000 <- MO201811170000[360:380,50:60,1:21]
MO201811170000_mean <- apply(newMO201811170000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811170000_mean,file = "D:/dissertation/rds for input/MO201811170000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811170000_mean.rds')



#1200 hrs
MO201811171200 <- readRDS("D:/dissertation/input for the data met/MO201811171200.rds")
image.plot(lonin,latin,MO201811171200[,,1])
summary(MO201811171200)

newMO201811171200 <- MO201811171200[360:380,50:60,1:21]
MO201811171200_mean <- apply(newMO201811171200, 3, mean, na.rm = TRUE)
saveRDS(MO201811171200_mean,file = "D:/dissertation/rds for input/MO201811171200_mean.rds")
object <- readRDS('D:/dissertation/rds for input/MO201811171200_mean.rds')

```

output
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#########output file ########
###0000 hrs ######
sim15_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181117T0000Z_glm_anal.nc")
sim_15_0_cs <- ncvar_get(sim15_0, varid = 'caesium_137_deposition')
nc_close(sim15_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_15_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_15_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 17/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_15_0_cs)

newsim_15_0_cs <- sim_15_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[29, "meancs"] <- data.frame(meancs = mean(newsim_15_0_cs))
#mean_df


#max_loc[29,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_15_0_cs))
#max_loc

#particular location
newsim_15_0_cs <- sim_15_0_cs[which(lonout >= 0 & lonout <= 1), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 0 & lonout <= 1)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[29, "meancsloc"] <- data.frame(meancsloc = mean(newsim_15_0_cs))
#df_loc
```


```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim15_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181117T1200Z_glm_anal.nc")
sim_15_12_cs <- ncvar_get(sim15_12, varid = 'caesium_137_deposition')
nc_close(sim15_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_15_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_15_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 17/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_15_12_cs)

newsim_15_12_cs <- sim_15_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[30, "meancs"] <- data.frame(meancs = mean(newsim_15_12_cs))
#mean_df

#particular location
newsim_15_12_cs <- sim_15_12_cs[which(lonout >= 8 & lonout <= 9), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 8 & lonout <= 9)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[30, "meancsloc"] <- data.frame(meancsloc = mean(newsim_15_12_cs))
#df_loc

#max_loc[30,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_15_12_cs))
#max_loc
```



############### 16 simulation ##################
#### 2018 11 18 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811180000 <- readRDS("D:/dissertation/input for the data met/MO201811180000.rds")
image.plot(lonin,latin,MO201811180000[,,1])
summary(MO201811180000)

summary(MO201811180000[360:380,50:60,1:4])
newMO201811180000 <- MO201811180000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811180000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811180000.csv"
#write.csv(newMO201811180000, file = file_path, row.names = FALSE)

newMO201811180000 <- MO201811180000[360:380,50:60,1:21]
MO201811180000_mean <- apply(newMO201811180000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811180000_mean,file = "D:/dissertation/rds for input/MO201811180000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811180000_mean.rds')


```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#1200 hrs
MO201811181200 <- readRDS("D:/dissertation/input for the data met/MO201811181200.rds")
image.plot(lonin,latin,MO201811181200[,,1])
summary(MO201811181200)

summary(MO201811181200[360:380,50:60,1:4])
newMO201811181200 <- MO201811181200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811181200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811181200.csv"
#write.csv(newMO201811181200, file = file_path, row.names = FALSE)

newMO201811181200 <- MO201811181200[360:380,50:60,1:21]
MO201811181200_mean <- apply(newMO201811181200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811181200_mean,file = "D:/dissertation/rds for input/MO201811181200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811181200_mean.rds')



```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#########output file ########
###0000 hrs ######
sim16_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181118T0000Z_glm_anal.nc")
sim_16_0_cs <- ncvar_get(sim16_0, varid = 'caesium_137_deposition')
nc_close(sim16_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_16_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_16_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 18/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_16_0_cs)

newsim_16_0_cs <- sim_16_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[31, "meancs"] <- data.frame(meancs = mean(newsim_16_0_cs))
#mean_df
#max_loc[31,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_16_0_cs))
#max_loc

#particular loc
newsim_16_0_cs <- sim_16_0_cs[which(lonout >= 1 & lonout <= 2), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >= 1 & lonout <= 2)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[31, "meancsloc"] <- data.frame(meancsloc = mean(newsim_16_0_cs))
#df_loc
```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim16_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181118T1200Z_glm_anal.nc")
sim_16_12_cs <- ncvar_get(sim16_12, varid = 'caesium_137_deposition')
nc_close(sim16_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_16_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_16_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 18/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_16_12_cs)

newsim_16_12_cs <- sim_16_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[32, "meancs"] <- data.frame(meancs = mean(newsim_16_12_cs))
#mean_df


#particular loc
newsim_16_12_cs <- sim_16_12_cs[which(lonout >= -10 & lonout <= -9), which(latout >= 43 & latout <= 44),8]
lon_ind <- which(lonout >= -10 & lonout <= -9)
lat_ind <- which(latout >= 43 & latout <= 44)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[32, "meancsloc"] <- data.frame(meancsloc = mean(newsim_16_12_cs))
#df_loc
#max_loc[32,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_16_12_cs))
#max_loc
```

############### 17 simulation ##################
#skkiped to 20 no 19
#### 2018 11 20 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811200000 <- readRDS("D:/dissertation/input for the data met/MO201811200000.rds")
image.plot(lonin,latin,MO201811200000[,,1])
summary(MO201811200000)

summary(MO201811200000[360:380,50:60,1:4])
newMO201811200000 <- MO201811200000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811200000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811200000.csv"
#write.csv(newMO201811200000, file = file_path, row.names = FALSE)

newMO201811200000 <- MO201811200000[360:380,50:60,1:21]
MO201811200000_mean <- apply(newMO201811200000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811200000_mean,file = "D:/dissertation/rds for input/MO201811200000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811200000_mean.rds')


#1200 hrs
MO201811201200 <- readRDS("D:/dissertation/input for the data met/MO201811201200.rds")
image.plot(lonin,latin,MO201811201200[,,1])
summary(MO201811201200)

summary(MO201811201200[360:380,50:60,1:4])
newMO201811201200 <- MO201811201200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811201200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811201200.csv"
#write.csv(newMO201811201200, file = file_path, row.names = FALSE)

newMO201811201200 <- MO201811201200[360:380,50:60,1:21]
MO201811201200_mean <- apply(newMO201811201200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811201200_mean,file = "D:/dissertation/rds for input/MO201811201200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811201200_mean.rds')

```

output file
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
###0000 hrs ######
sim17_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181120T0000Z_glm_anal.nc")
sim_17_0_cs <- ncvar_get(sim17_0, varid = 'caesium_137_deposition')
nc_close(sim17_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_17_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_17_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 20/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_17_0_cs)

newsim_17_0_cs <- sim_17_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[33, "meancs"] <- data.frame(meancs = mean(newsim_17_0_cs))
#mean_df
#particular loc
newsim_17_0_cs <- sim_17_0_cs[which(lonout >= 0 & lonout <= 1), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= 0 & lonout <= 1)
lat_ind <- which(latout >= 45 & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[33, "meancsloc"] <- data.frame(meancsloc = mean(newsim_17_0_cs))
#df_loc
#max_loc[33,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_17_0_cs))
#max_loc
```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim17_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181120T1200Z_glm_anal.nc")
sim_17_12_cs <- ncvar_get(sim17_12, varid = 'caesium_137_deposition')
nc_close(sim17_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_17_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_17_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 20/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_17_12_cs)

newsim_17_12_cs <- sim_17_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[34, "meancs"] <- data.frame(meancs = mean(newsim_17_12_cs))
#mean_df

#particular loc
newsim_17_12_cs <- sim_17_12_cs[which(lonout >= -5 & lonout <= -4), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= -5 & lonout <= -4)
lat_ind <- which(latout >= 45 & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[34, "meancsloc"] <- data.frame(meancsloc = mean(newsim_17_12_cs))
#df_loc
#max_loc[34,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_17_12_cs))
#max_loc
```
############### 18 simulation ##################
#### 2018 11 21 #####
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
# input file 
#0000 hrs
MO201811210000 <- readRDS("D:/dissertation/input for the data met/MO201811210000.rds")
image.plot(lonin,latin,MO201811210000[,,1])
summary(MO201811210000)

summary(MO201811210000[360:380,50:60,1:4])
newMO201811210000 <- MO201811210000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811210000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811210000.csv"
#write.csv(newMO201811210000, file = file_path, row.names = FALSE)

newMO201811210000 <- MO201811210000[360:380,50:60,1:21]
MO201811210000_mean <- apply(newMO201811210000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811210000_mean,file = "D:/dissertation/rds for input/MO201811210000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811210000_mean.rds')

#1200 hrs
MO201811211200 <- readRDS("D:/dissertation/input for the data met/MO201811211200.rds")
image.plot(lonin,latin,MO201811211200[,,1])
summary(MO201811211200)

summary(MO201811211200[360:380,50:60,1:4])
newMO201811211200 <- MO201811211200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811211200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811211200.csv"
#write.csv(newMO201811211200, file = file_path, row.names = FALSE)


newMO201811211200 <- MO201811211200[360:380,50:60,1:21]
MO201811211200_mean <- apply(newMO201811211200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811211200_mean,file = "D:/dissertation/rds for input/MO201811211200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811211200_mean.rds')



```


```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#########output file ########
###0000 hrs ######
sim18_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181121T0000Z_glm_anal.nc")
sim_18_0_cs <- ncvar_get(sim18_0, varid = 'caesium_137_deposition')
nc_close(sim18_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_18_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_18_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 21/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_18_0_cs)

newsim_18_0_cs <- sim_18_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[35, "meancs"] <- data.frame(meancs = mean(newsim_18_0_cs))
#mean_df

#particular loc
newsim_18_0_cs <- sim_18_0_cs[which(lonout >= 10 & lonout <= 11), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= 10 & lonout <= 11)
lat_ind <- which(latout >= 45 & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[35, "meancsloc"] <- data.frame(meancsloc = mean(newsim_18_0_cs))
#df_loc
#max_loc[35,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_18_0_cs))
#max_loc
```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim18_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181121T1200Z_glm_anal.nc")
sim_18_12_cs <- ncvar_get(sim18_12, varid = 'caesium_137_deposition')
nc_close(sim18_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_18_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_18_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 21/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_18_12_cs)

newsim_18_12_cs <- sim_18_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[36, "meancs"] <- data.frame(meancs = mean(newsim_18_12_cs))
#mean_df

#particular location
newsim_18_12_cs <- sim_18_12_cs[which(lonout >= 15 & lonout <= 16), which(latout >= 55 & latout <= 56),8]
lon_ind <- which(lonout >=  15& lonout <= 16)
lat_ind <- which(latout >= 55 & latout <= 56)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[36, "meancsloc"] <- data.frame(meancsloc = mean(newsim_18_12_cs))
#df_loc
#max_loc[36,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_18_12_cs))
#max_loc
```
############### 19 simulation ##################
#### 2018 11 22 #####
# input file 
#0000 hrs
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
MO201811220000 <- readRDS("D:/dissertation/input for the data met/MO201811220000.rds")
image.plot(lonin,latin,MO201811220000[,,1])
summary(MO201811220000)

summary(MO201811220000[360:380,50:60,1:4])
newMO201811220000 <- MO201811220000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811220000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811220000.csv"
#write.csv(newMO201811220000, file = file_path, row.names = FALSE)

newMO201811220000 <- MO201811220000[360:380,50:60,1:21]
MO201811220000_mean <- apply(newMO201811220000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811220000_mean,file = "D:/dissertation/rds for input/MO201811220000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811220000_mean.rds')

#1200 hrs
MO201811221200 <- readRDS("D:/dissertation/input for the data met/MO201811221200.rds")
image.plot(lonin,latin,MO201811221200[,,1])
summary(MO201811221200)

summary(MO201811221200[360:380,50:60,1:4])
newMO201811221200 <- MO201811221200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811221200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811221200.csv"
#write.csv(newMO201811221200, file = file_path, row.names = FALSE)

newMO201811221200 <- MO201811221200[360:380,50:60,1:21]
MO201811221200_mean <- apply(newMO201811221200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811221200_mean,file = "D:/dissertation/rds for input/MO201811221200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811221200_mean.rds')


```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
########output file ########
###0000 hrs ######
sim19_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181122T0000Z_glm_anal.nc")
sim_19_0_cs <- ncvar_get(sim19_0, varid = 'caesium_137_deposition')
nc_close(sim19_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_19_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_19_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 22/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_19_0_cs)

newsim_19_0_cs <- sim_19_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[37, "meancs"] <- data.frame(meancs = mean(newsim_19_0_cs))
#mean_df

#particular loaction
newsim_19_0_cs <- sim_19_0_cs[which(lonout >= 4 & lonout <= 5), which(latout >= 51 & latout <= 52),8]
lon_ind <- which(lonout >= 4 & lonout <= 5)
lat_ind <- which(latout >= 51 & latout <= 52)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[37, "meancsloc"] <- data.frame(meancsloc = mean(newsim_19_0_cs))
#df_loc

#max_loc[37,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_19_0_cs))
#max_loc
```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim19_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181122T1200Z_glm_anal.nc")
sim_19_12_cs <- ncvar_get(sim19_12, varid = 'caesium_137_deposition')
nc_close(sim19_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_19_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_19_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 22/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_19_12_cs)

newsim_19_12_cs <- sim_19_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[38, "meancs"] <- data.frame(meancs = mean(newsim_19_12_cs))
#mean_df

#particular location
newsim_19_12_cs <- sim_19_12_cs[which(lonout >= 8 & lonout <= 9), which(latout >= 48 & latout <= 49),8]
lon_ind <- which(lonout >= 8 & lonout <= 9)
lat_ind <- which(latout >= 48 & latout <= 49)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[38, "meancsloc"] <- data.frame(meancsloc = mean(newsim_19_12_cs))
#df_loc

#max_loc[38,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_19_12_cs))
#max_loc
```


##################################################
############### 20 simulation ##################
#### 2018 11 23 #####
# input file 
#0000 hrs
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
MO201811230000 <- readRDS("D:/dissertation/input for the data met/MO201811230000.rds")
image.plot(lonin,latin,MO201811230000[,,1])
summary(MO201811230000)

summary(MO201811230000[360:380,50:60,1:4])
newMO201811230000 <- MO201811230000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811230000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811230000.csv"
#write.csv(newMO201811230000, file = file_path, row.names = FALSE)

newMO201811230000 <- MO201811230000[360:380,50:60,1:21]
MO201811230000_mean <- apply(newMO201811230000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811230000_mean,file = "D:/dissertation/rds for input/MO201811230000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811230000_mean.rds')

#1200 hrs
MO201811231200 <- readRDS("D:/dissertation/input for the data met/MO201811231200.rds")
image.plot(lonin,latin,MO201811231200[,,1])
summary(MO201811231200)

summary(MO201811231200[360:380,50:60,1:4])
newMO201811231200 <- MO201811231200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811231200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811231200.csv"
#write.csv(newMO201811231200, file = file_path, row.names = FALSE)

newMO201811231200 <- MO201811231200[360:380,50:60,1:21]
MO201811231200_mean <- apply(newMO201811231200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811231200_mean,file = "D:/dissertation/rds for input/MO201811231200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811231200_mean.rds')



```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
########output file ########
###0000 hrs ######
sim20_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181123T0000Z_glm_anal.nc")
sim_20_0_cs <- ncvar_get(sim20_0, varid = 'caesium_137_deposition')
nc_close(sim20_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_20_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_20_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 23/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_20_0_cs)

newsim_20_0_cs <- sim_20_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[39, "meancs"] <- data.frame(meancs = mean(newsim_20_0_cs))
#mean_df
#max_loc[39,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_20_0_cs))
#max_loc

#particular location

newsim_20_0_cs <- sim_20_0_cs[which(lonout >= -2 & lonout <= -1), which(latout >= 50 & latout <= 51),8]
lon_ind <- which(lonout >= -2 & lonout <= -1)
lat_ind <- which(latout >= 50 & latout <= 51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[39, "meancsloc"] <- data.frame(meancsloc = mean(newsim_20_0_cs))
#df_loc
```


```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim20_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181123T1200Z_glm_anal.nc")
sim_20_12_cs <- ncvar_get(sim20_12, varid = 'caesium_137_deposition')
nc_close(sim20_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_20_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_20_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 23/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_20_12_cs)

newsim_20_12_cs <- sim_20_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[40, "meancs"] <- data.frame(meancs = mean(newsim_20_12_cs))
#mean_df

#particular loaction
newsim_20_12_cs <- sim_20_12_cs[which(lonout >= -1 & lonout <= 0), which(latout >= 48 & latout <= 49),8]
lon_ind <- which(lonout >= -1 & lonout <= 0)
lat_ind <- which(latout >= 48 & latout <= 49)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[40, "meancsloc"] <- data.frame(meancsloc = mean(newsim_20_12_cs))
#df_loc
#max_loc[40,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_20_12_cs))
#max_loc
```
##################################################
############### 21 simulation ##################
#### 2018 11 24 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811240000 <- readRDS("D:/dissertation/input for the data met/MO201811240000.rds")
image.plot(lonin,latin,MO201811240000[,,1])
summary(MO201811240000)

summary(MO201811240000[360:380,50:60,1:4])
newMO201811240000 <- MO201811240000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811240000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811240000.csv"
#write.csv(newMO201811240000, file = file_path, row.names = FALSE)

newMO201811240000 <- MO201811240000[360:380,50:60,1:21]
MO201811240000_mean <- apply(newMO201811240000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811240000_mean,file = "D:/dissertation/rds for input/MO201811240000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811240000_mean.rds')


#1200 hrs
MO201811241200 <- readRDS("D:/dissertation/input for the data met/MO201811241200.rds")
image.plot(lonin,latin,MO201811241200[,,1])
summary(MO201811241200)

summary(MO201811241200[360:380,50:60,1:4])
newMO201811241200 <- MO201811241200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811241200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811241200.csv"
#write.csv(newMO201811241200, file = file_path, row.names = FALSE)

newMO201811241200 <- MO201811241200[360:380,50:60,1:21]
MO201811241200_mean <- apply(newMO201811241200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811241200_mean,file = "D:/dissertation/rds for input/MO201811241200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811241200_mean.rds')

```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
########output file ########
###0000 hrs ######
sim21_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181124T0000Z_glm_anal.nc")
sim_21_0_cs <- ncvar_get(sim21_0, varid = 'caesium_137_deposition')
nc_close(sim21_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_21_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_21_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 24/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_21_0_cs)

newsim_21_0_cs <- sim_21_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[41, "meancs"] <- data.frame(meancs = mean(newsim_21_0_cs))
#mean_df

#particular location
newsim_21_0_cs <- sim_21_0_cs[which(lonout >= 5 & lonout <= 6), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >=  5& lonout <= 6)
lat_ind <- which(latout >= 45 & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[41, "meancsloc"] <- data.frame(meancsloc = mean(newsim_21_0_cs))
#df_loc

#max_loc[41,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_21_0_cs))
#max_loc
```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim21_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181124T1200Z_glm_anal.nc")
sim_21_12_cs <- ncvar_get(sim21_12, varid = 'caesium_137_deposition')
nc_close(sim21_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_21_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_21_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 24/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_21_12_cs)

newsim_21_12_cs <- sim_21_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[42, "meancs"] <- data.frame(meancs = mean(newsim_21_12_cs))
#mean_df

#particular loaction
newsim_21_12_cs <- sim_21_12_cs[which(lonout >= 3 & lonout <= 4), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= 3 & lonout <= 4)
lat_ind <- which(latout >= 45 & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[42, "meancsloc"] <- data.frame(meancsloc = mean(newsim_21_12_cs))
#df_loc
#max_loc[42,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_21_12_cs))
#max_loc
```
############### 22 simulation ##################
#### 2018 11 25 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811250000 <- readRDS("D:/dissertation/input for the data met/MO201811250000.rds")
image.plot(lonin,latin,MO201811250000[,,1])
summary(MO201811250000)

summary(MO201811250000[360:380,50:60,1:4])
newMO201811250000 <- MO201811250000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811250000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811250000.csv"
#write.csv(newMO201811250000, file = file_path, row.names = FALSE)


newMO201811250000 <- MO201811250000[360:380,50:60,1:21]
MO201811250000_mean <- apply(newMO201811250000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811250000_mean,file = "D:/dissertation/rds for input/MO201811250000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811250000_mean.rds')


#1200 hrs
MO201811251200 <- readRDS("D:/dissertation/input for the data met/MO201811251200.rds")
image.plot(lonin,latin,MO201811251200[,,1])
summary(MO201811251200)

summary(MO201811251200[360:380,50:60,1:4])
newMO201811251200 <- MO201811251200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811251200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811251200.csv"
#write.csv(newMO201811251200, file = file_path, row.names = FALSE)

newMO201811251200 <- MO201811251200[360:380,50:60,1:21]
MO201811251200_mean <- apply(newMO201811251200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811251200_mean,file = "D:/dissertation/rds for input/MO201811251200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811251200_mean.rds')


```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
########output file ########
###0000 hrs ######
sim22_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181125T0000Z_glm_anal.nc")
sim_22_0_cs <- ncvar_get(sim22_0, varid = 'caesium_137_deposition')
nc_close(sim22_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_22_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_22_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 25/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_22_0_cs)

newsim_22_0_cs <- sim_22_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[43, "meancs"] <- data.frame(meancs = mean(newsim_22_0_cs))
#mean_df

#max_loc[43,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_22_0_cs))
#max_loc

#particlar location
newsim_22_0_cs <- sim_22_0_cs[which(lonout >= 10 & lonout <= 11), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= 10  & lonout <= 11)
lat_ind <- which(latout >= 45  & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[43, "meancsloc"] <- data.frame(meancsloc = mean(newsim_22_0_cs))
#df_loc
```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim22_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181125T1200Z_glm_anal.nc")
sim_22_12_cs <- ncvar_get(sim22_12, varid = 'caesium_137_deposition')
nc_close(sim22_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_22_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_22_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 25/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_22_12_cs)


newsim_22_12_cs <- sim_22_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[44, "meancs"] <- data.frame(meancs = mean(newsim_22_12_cs))
#mean_df

#max_loc[44,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_22_12_cs))
#max_loc

#particular loaction
newsim_22_12_cs <- sim_22_12_cs[which(lonout >= 5 & lonout <= 6), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= 5 & lonout <= 6)
lat_ind <- which(latout >= 45 & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[44, "meancsloc"] <- data.frame(meancsloc = mean(newsim_22_12_cs))
#df_loc
```


############### 23 simulation ##################
#### 2018 11 26 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811260000 <- readRDS("D:/dissertation/input for the data met/MO201811260000.rds")
image.plot(lonin,latin,MO201811260000[,,1])
summary(MO201811260000)

summary(MO201811260000[360:380,50:60,1:4])
newMO201811260000 <- MO201811260000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811260000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811260000.csv"
#write.csv(newMO201811260000, file = file_path, row.names = FALSE)


newMO201811260000 <- MO201811260000[360:380,50:60,1:21]
MO201811260000_mean <- apply(newMO201811260000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811260000_mean,file = "D:/dissertation/rds for input/MO201811260000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811260000_mean.rds')


#1200 hrs
MO201811261200 <- readRDS("D:/dissertation/input for the data met/MO201811261200.rds")
image.plot(lonin,latin,MO201811261200[,,1])
summary(MO201811261200)

summary(MO201811261200[360:380,50:60,1:4])
newMO201811261200 <- MO201811261200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811261200[,,1])
file_path <- "D:/dissertation/csv files for input/newMO201811261200.csv"
write.csv(newMO201811261200, file = file_path, row.names = FALSE)

newMO201811261200 <- MO201811261200[360:380,50:60,1:21]
MO201811261200_mean <- apply(newMO201811261200, 3, mean, na.rm = TRUE)
saveRDS(MO201811261200_mean,file = "D:/dissertation/rds for input/MO201811261200_mean.rds")
object <- readRDS('D:/dissertation/rds for input/MO201811261200_mean.rds')

```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
########output file ########
###0000 hrs ######
sim23_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181126T0000Z_glm_anal.nc")
sim_23_0_cs <- ncvar_get(sim23_0, varid = 'caesium_137_deposition')
nc_close(sim23_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_23_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_23_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 26/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_23_0_cs)


newsim_23_0_cs <- sim_23_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[45, "meancs"] <- data.frame(meancs = mean(newsim_23_0_cs))
#mean_df


#particular loc
newsim_23_0_cs <- sim_23_0_cs[which(lonout >= 8 & lonout <= 9), which(latout >= 51 & latout <= 52),8]
lon_ind <- which(lonout >= 8 & lonout <= 9)
lat_ind <- which(latout >= 51 & latout <= 52)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[45, "meancsloc"] <- data.frame(meancsloc = mean(newsim_23_0_cs))
#df_loc

#max_loc[45,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_23_0_cs))
#max_loc
```


```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim23_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181126T1200Z_glm_anal.nc")
sim_23_12_cs <- ncvar_get(sim23_12, varid = 'caesium_137_deposition')
nc_close(sim23_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_23_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_23_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 26/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_23_12_cs)

newsim_23_12_cs <- sim_23_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[46, "meancs"] <- data.frame(meancs = mean(newsim_23_12_cs))
#mean_df

#particular loc
newsim_23_12_cs <- sim_23_12_cs[which(lonout >= 1 & lonout <= 2), which(latout >= 43 & latout <= 44),8]
lon_ind <- which(lonout >=  1 & lonout <= 2)
lat_ind <- which(latout >= 43 & latout <= 44)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[46, "meancsloc"] <- data.frame(meancsloc = mean(newsim_23_12_cs))
#df_loc

#max_loc[46,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_23_12_cs))
#max_loc
```
############### 24 simulation ##################
#### 2018 11 27 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811270000 <- readRDS("D:/dissertation/input for the data met/MO201811270000.rds")
image.plot(lonin,latin,MO201811270000[,,1])
summary(MO201811270000)

summary(MO201811270000[360:380,50:60,1:4])
newMO201811270000 <- MO201811270000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811270000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811270000.csv"
#write.csv(newMO201811270000, file = file_path, row.names = FALSE)

newMO201811270000 <- MO201811270000[360:380,50:60,1:21]
MO201811270000_mean <- apply(newMO201811270000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811270000_mean,file = "D:/dissertation/rds for input/MO201811270000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811270000_mean.rds')


#1200 hrs
MO201811271200 <- readRDS("D:/dissertation/input for the data met/MO201811271200.rds")
image.plot(lonin,latin,MO201811271200[,,1])
summary(MO201811271200)

summary(MO201811271200[360:380,50:60,1:4])
newMO201811271200 <- MO201811271200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811271200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811271200.csv"
#write.csv(newMO201811271200, file = file_path, row.names = FALSE)

newMO201811271200 <- MO201811271200[360:380,50:60,1:21]
MO201811271200_mean <- apply(newMO201811271200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811271200_mean,file = "D:/dissertation/rds for input/MO201811271200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811271200_mean.rds')

```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
########output file ########
###0000 hrs ######
sim24_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181127T0000Z_glm_anal.nc")
sim_24_0_cs <- ncvar_get(sim24_0, varid = 'caesium_137_deposition')
nc_close(sim24_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_24_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_24_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 27/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_24_0_cs)

newsim_24_0_cs <- sim_24_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[47, "meancs"] <- data.frame(meancs = mean(newsim_24_0_cs))
#mean_df
#max_loc[47,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_24_0_cs))
#max_loc


#particular location

newsim_24_0_cs <- sim_24_0_cs[which(lonout >= 6 & lonout <= 7), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= 6 & lonout <= 7)
lat_ind <- which(latout >= 45 & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[47, "meancsloc"] <- data.frame(meancsloc = mean(newsim_24_0_cs))
#df_loc
```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim24_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181127T1200Z_glm_anal.nc")
sim_24_12_cs <- ncvar_get(sim24_12, varid = 'caesium_137_deposition')
nc_close(sim24_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_24_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_24_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 27/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_24_12_cs)

newsim_24_12_cs <- sim_24_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[48, "meancs"] <- data.frame(meancs = mean(newsim_24_12_cs))
#mean_df
#max_loc[48,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_24_12_cs))
#max_loc


#particulaar location
newsim_24_12_cs <- sim_24_12_cs[which(lonout >= 5 & lonout <= 6), which(latout >= 50 & latout <= 51),8]
lon_ind <- which(lonout >= 5 & lonout <= 6)
lat_ind <- which(latout >= 50 & latout <= 51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[48, "meancsloc"] <- data.frame(meancsloc = mean(newsim_24_12_cs))
#df_loc
```


############### 25 simulation ##################
#### 2018 11 28 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811280000 <- readRDS("D:/dissertation/input for the data met/MO201811280000.rds")
image.plot(lonin,latin,MO201811280000[,,1])
summary(MO201811280000)

summary(MO201811280000[360:380,50:60,1:4])
newMO201811280000 <- MO201811280000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811280000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811280000.csv"
#write.csv(newMO201811280000, file = file_path, row.names = FALSE)

newMO201811280000 <- MO201811280000[360:380,50:60,1:21]
MO201811280000_mean <- apply(newMO201811280000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811280000_mean,file = "D:/dissertation/rds for input/MO201811280000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811280000_mean.rds')



#1200 hrs
MO201811281200 <- readRDS("D:/dissertation/input for the data met/MO201811281200.rds")
image.plot(lonin,latin,MO201811281200[,,1])
summary(MO201811281200)

summary(MO201811281200[360:380,50:60,1:4])
newMO201811281200 <- MO201811281200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811281200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811281200.csv"
#write.csv(newMO201811281200, file = file_path, row.names = FALSE)


newMO201811281200 <- MO201811281200[360:380,50:60,1:21]
MO201811281200_mean <- apply(newMO201811281200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811281200_mean,file = "D:/dissertation/rds for input/MO201811281200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811281200_mean.rds')

```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
########output file ########
###0000 hrs ######
sim25_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181128T0000Z_glm_anal.nc")
sim_25_0_cs <- ncvar_get(sim25_0, varid = 'caesium_137_deposition')
nc_close(sim25_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_25_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_25_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 28/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_25_0_cs)

newsim_25_0_cs <- sim_25_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[49, "meancs"] <- data.frame(meancs = mean(newsim_25_0_cs))
#mean_df

#particular loacton

newsim_25_0_cs <- sim_25_0_cs[which(lonout >= 5 & lonout <= 6), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= 5 & lonout <= 6)
lat_ind <- which(latout >= 45  & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[49, "meancsloc"] <- data.frame(meancsloc = mean(newsim_25_0_cs))
#df_loc
#max_loc[49,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_25_0_cs))
#max_loc
```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}

#####1200 hrs 
sim25_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181128T1200Z_glm_anal.nc")
sim_25_12_cs <- ncvar_get(sim25_12, varid = 'caesium_137_deposition')
nc_close(sim25_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_25_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_25_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 28/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_25_12_cs)

newsim_25_12_cs <- sim_25_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[50, "meancs"] <- data.frame(meancs = mean(newsim_25_12_cs))
#mean_df

#particular location
newsim_25_12_cs <- sim_25_12_cs[which(lonout >= -3 & lonout <= -2), which(latout >= 50 & latout <= 51),8]
lon_ind <- which(lonout >= -3 & lonout <= -2)
lat_ind <- which(latout >= 50 & latout <= 51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[50, "meancsloc"] <- data.frame(meancsloc = mean(newsim_25_12_cs))
#df_loc
#max_loc[50,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_25_12_cs))
#max_loc
```
##################################################
############### 26 simulation ##################
#### 2018 11 29 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811290000 <- readRDS("D:/dissertation/input for the data met/MO201811290000.rds")
image.plot(lonin,latin,MO201811290000[,,1])
summary(MO201811290000)

summary(MO201811290000[360:380,50:60,1:4])
newMO201811290000 <- MO201811290000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811290000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811290000.csv"
#write.csv(newMO201811290000, file = file_path, row.names = FALSE)

newMO201811290000 <- MO201811290000[360:380,50:60,1:21]
MO201811290000_mean <- apply(newMO201811290000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811290000_mean,file = "D:/dissertation/rds for input/MO201811290000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811290000_mean.rds')

#1200 hrs
MO201811291200 <- readRDS("D:/dissertation/input for the data met/MO201811291200.rds")
image.plot(lonin,latin,MO201811291200[,,1])
summary(MO201811291200)

summary(MO201811291200[360:380,50:60,1:4])
newMO201811291200 <- MO201811291200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811291200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811291200.csv"
#write.csv(newMO201811291200, file = file_path, row.names = FALSE)



newMO201811291200 <- MO201811291200[360:380,50:60,1:21]
MO201811291200_mean <- apply(newMO201811291200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811291200_mean,file = "D:/dissertation/rds for input/MO201811291200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811291200_mean.rds')

```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
########output file ########
###0000 hrs ######
sim26_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181129T0000Z_glm_anal.nc")
sim_26_0_cs <- ncvar_get(sim26_0, varid = 'caesium_137_deposition')
nc_close(sim26_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_26_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_26_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 29/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_26_0_cs)

newsim_26_0_cs <- sim_26_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[51, "meancs"] <- data.frame(meancs = mean(newsim_26_0_cs))
#mean_df
#max_loc[51,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_26_0_cs))
#max_loc


#particular locartion

newsim_26_0_cs <- sim_26_0_cs[which(lonout >= 10 & lonout <= 11), which(latout >= 50 & latout <= 51),8]
lon_ind <- which(lonout >= 10 & lonout <= 11)
lat_ind <- which(latout >= 50 & latout <= 51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[51, "meancsloc"] <- data.frame(meancsloc = mean(newsim_26_0_cs))
#df_loc
```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim26_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181129T1200Z_glm_anal.nc")
sim_26_12_cs <- ncvar_get(sim26_12, varid = 'caesium_137_deposition')
nc_close(sim26_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_26_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_26_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 29/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_26_12_cs)

newsim_26_12_cs <- sim_26_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[52, "meancs"] <- data.frame(meancs = mean(newsim_26_12_cs))
#mean_df
#max_loc[52,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_26_12_cs))
#max_loc


#particular location
newsim_26_12_cs <- sim_26_12_cs[which(lonout >= 0 & lonout <= 1), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= 0  & lonout <= 1)
lat_ind <- which(latout >= 45 & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[52, "meancsloc"] <- data.frame(meancsloc = mean(newsim_26_12_cs))
#df_loc
```


##################################################
############### 27 simulation ##################
#### 2018 11 30 #####
# input file 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#0000 hrs
MO201811300000 <- readRDS("D:/dissertation/input for the data met/MO201811300000.rds")
image.plot(lonin,latin,MO201811300000[,,1])
summary(MO201811300000)

summary(MO201811300000[360:380,50:60,1:4])
newMO201811300000 <- MO201811300000[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811300000[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811300000.csv"
#write.csv(newMO201811300000, file = file_path, row.names = FALSE)

newMO201811300000 <- MO201811300000[360:380,50:60,1:21]
MO201811300000_mean <- apply(newMO201811300000, 3, mean, na.rm = TRUE)
#saveRDS(MO201811300000_mean,file = "D:/dissertation/rds for input/MO201811300000_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811300000_mean.rds')


#1200 hrs
MO201811301200 <- readRDS("D:/dissertation/input for the data met/MO201811301200.rds")
image.plot(lonin,latin,MO201811301200[,,1])
summary(MO201811301200)

summary(MO201811301200[360:380,50:60,1:4])
newMO201811301200 <- MO201811301200[360:380,50:60,1:4]
image.plot(lonin[360:380], latin[50:60], newMO201811301200[,,1])
#file_path <- "D:/dissertation/csv files for input/newMO201811301200.csv"
#write.csv(newMO201811301200, file = file_path, row.names = FALSE)

newMO201811301200 <- MO201811301200[360:380,50:60,1:21]
MO201811301200_mean <- apply(newMO201811301200, 3, mean, na.rm = TRUE)
#saveRDS(MO201811301200_mean,file = "D:/dissertation/rds for input/MO201811301200_mean.rds")
#object <- readRDS('D:/dissertation/rds for input/MO201811301200_mean.rds')


```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
########output file ########
###0000 hrs ######
sim27_0<- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181130T0000Z_glm_anal.nc")
sim_27_0_cs <- ncvar_get(sim27_0, varid = 'caesium_137_deposition')
nc_close(sim27_0)

grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_27_0_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_27_0_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 30/11/18 00:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)

summary(sim_27_0_cs)

newsim_27_0_cs <- sim_27_0_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[53, "meancs"] <- data.frame(meancs = mean(newsim_27_0_cs))
#mean_df
#max_loc[53,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_27_0_cs))
#max_loc

#particular location
newsim_27_0_cs <- sim_27_0_cs[which(lonout >= -2 & lonout <= -1), which(latout >= 45 & latout <= 46),8]
lon_ind <- which(lonout >= -2 & lonout <= -1)
lat_ind <- which(latout >= 45 & latout <= 46)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[53, "meancsloc"] <- data.frame(meancsloc = mean(newsim_27_0_cs))
#df_loc
```
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
#####1200 hrs 
sim27_12 <- nc_open("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181130T1200Z_glm_anal.nc")
sim_27_12_cs <- ncvar_get(sim27_12, varid = 'caesium_137_deposition')
nc_close(sim27_12)


grid <- expand.grid(lonout, latout)
colnames(grid) <- c('Lon', 'Lat')
plot_data <- data.frame(grid,
                        Cs = c(sim_27_12_cs[,,8]))

plot_data <- subset(plot_data, Cs > 0) # removing 0s - no need to store these to plot
plot_data$Location <- 8
for (t in 8){
  plot_data <- rbind(plot_data,
                     data.frame(grid,
                                Cs = c(sim_27_12_cs[,,t]),
                                Location = t))
  plot_data <- subset(plot_data, Cs > 0)
}

ggplot(plot_data, aes(x = Lon, y = Lat, fill = log(Cs+1))) +
  geom_tile() +
  facet_wrap(vars(Location)) +
  scale_fill_viridis(option = 'C') +
  borders(col = 'black') +
  labs(fill = 'Cs conc (log)', 
       title = 'Caesium release, start 30/11/18 12:00',
       x = 'Longitude', y = 'Latitude') +
  xlim(-15,25) +
  ylim(40,70)
summary(sim_27_12_cs)

newsim_27_12_cs <- sim_27_12_cs[which(lonout > -5 & lonout < 5), which(latout > 50 & latout < 60),8]
lon_ind <- which(lonout > -5 & lonout < 5)
lat_ind <- which(latout > 50 & latout < 60)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#mean_df[54, "meancs"] <- data.frame(meancs = mean(newsim_27_12_cs))
#mean_df

#particular location
newsim_27_12_cs <- sim_27_12_cs[which(lonout >= -6 & lonout <= -5), which(latout >= 50 & latout <= 51),8]
lon_ind <- which(lonout > -6 & lonout < -5)
lat_ind <- which(latout >= 50 & latout <= 51)
grid <- expand.grid(lon = lonout[lon_ind], lat = latout[lat_ind])
#df_loc[54, "meancsloc"] <- data.frame(meancsloc = mean(newsim_27_12_cs))
#df_loc
#max_loc[54,"maxcsloc"] <-data.frame(maxcsloc = max(newsim_27_12_cs))
#max_loc
```


```{r eval=FALSE,echo=TRUE,include=FALSE}
###### for max values of cs###############

file1 <- c("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181103T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181103T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181105T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181105T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181106T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181106T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181107T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181107T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181108T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181108T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181109T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181109T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181110T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181110T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181111T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181111T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181112T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181112T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181113T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181113T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181114T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181114T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181115T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181115T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181116T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181116T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181117T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181117T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181118T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181118T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181120T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181120T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181121T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181121T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181122T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181122T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181123T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181123T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181124T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181124T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181125T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181125T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181126T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181126T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181127T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181127T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181128T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181128T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181129T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181129T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181130T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181130T1200Z_glm_anal.nc")
max_df1 <- data.frame(maxcs = numeric(length(file1)-1))
i<- 0
for (file in file1){
  i=i+1
  sim1_0<- nc_open(file)
  sim_1_0_cs <- ncvar_get(sim1_0, varid = 'caesium_137_deposition')
  nc_close(sim1_0)
  
  newsim_1_0_cs <- sim_1_0_cs[which(lonout > -10 & lonout < 7), which(latout > 50 & latout < 60),8]
  dim(newsim_1_0_cs)
  max_df1[i,"maxcs"] <- data.frame(max = max(newsim_1_0_cs))
  max_df1
  
}
max_df1


```




```{r eval=FALSE,echo=TRUE}
#loop for mean cs for new region

file1 <- c("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181103T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181103T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181105T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181105T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181106T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181106T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181107T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181107T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181108T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181108T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181109T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181109T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181110T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181110T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181111T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181111T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181112T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181112T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181113T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181113T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181114T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181114T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181115T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181115T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181116T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181116T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181117T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181117T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181118T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181118T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181120T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181120T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181121T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181121T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181122T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181122T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181123T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181123T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181124T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181124T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181125T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181125T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181126T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181126T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181127T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181127T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181128T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181128T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181129T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181129T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181130T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181130T1200Z_glm_anal.nc")
mean_df1 <- data.frame(meancs = numeric(length(file1)))
i<- 0
for (file in file1){
i=i+1
sim1_0<- nc_open(file)
sim_1_0_cs <- ncvar_get(sim1_0, varid = 'caesium_137_deposition')
nc_close(sim1_0)

newsim_1_0_cs <- sim_1_0_cs[which(lonout > -10 & lonout < 7), which(latout > 50 & latout < 60),8]
dim(newsim_1_0_cs)
mean_df1[i,"meancs"] <- data.frame(meancs = mean(newsim_1_0_cs))
mean_df1

}
mean_df1

######loop for input file reading###########not complete####
latin <- readRDS("D:/dissertation/input for the data met/lat.rds")
lonin <- readRDS("D:/dissertation/input for the data met/lon.rds")

file1 <- readRDS("D:/dissertation/input for the data met/MO201811030000.rds")
mean <- apply(file1, 3, mean, na.rm = TRUE)
saveRDS(mean,file = "D:/dissertation/rds for input1/file1.rds")

```

```{r eval=FALSE,echo=TRUE}
###### for max values of cs###############

file1 <- c("D:/dissertation/output for data 70mb/radiological_scenario_201811/20181103T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181103T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181104T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181105T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181105T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181106T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181106T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181107T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181107T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181108T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181108T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181109T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181109T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181110T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181110T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181111T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181111T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181112T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181112T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181113T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181113T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181114T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181114T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181115T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181115T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181116T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181116T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181117T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181117T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181118T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181118T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181120T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181120T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181121T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181121T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181122T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181122T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181123T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181123T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181124T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181124T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181125T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181125T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181126T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181126T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181127T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181127T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181128T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181128T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181129T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181129T1200Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181130T0000Z_glm_anal.nc",
           "D:/dissertation/output for data 70mb/radiological_scenario_201811/20181130T1200Z_glm_anal.nc")
max_df1 <- data.frame(maxcs = numeric(length(file1)-1))
i<- 0
for (file in file1){
  i=i+1
  sim1_0<- nc_open(file)
  sim_1_0_cs <- ncvar_get(sim1_0, varid = 'caesium_137_deposition')
  nc_close(sim1_0)
  
  newsim_1_0_cs <- sim_1_0_cs[which(lonout > -10 & lonout < 7), which(latout > 50 & latout < 60),8]
  dim(newsim_1_0_cs)
  max_df1[i,"maxcs"] <- data.frame(max = max(newsim_1_0_cs))
  max_df1
  
}
max_df1

```



Initial data analysis
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
new_renamed <- read.csv("D:/dissertation/meandf csv/test5renamed.csv")
summary(new_renamed$U_COMPNT_OF_WIND)
summary(new_renamed$v_COMPNT_OF_WIND)
summary(new_renamed$W_COMPNT_OF_WIND)
summary(new_renamed$XCOMP_OF_SURF)
summary(new_renamed$YCOMP_OF_SURF)
summary(new_renamed$HEAT_FLUX)
summary(new_renamed$PRESSURE_SEA)
summary(new_renamed$SURFACE_PRESSURE)
summary(new_renamed$TEMP)
summary(new_renamed$BOUNDARY_LAYER_DEPTH)
summary(new_renamed$ROUGHNESS)
summary(new_renamed$LOWEST_CONV_CLOUD)
summary(new_renamed$PRESSURE_AT_LOWEST_CONV_BASE)
summary(new_renamed$LARGE_SCALE_RAINFALL)
summary(new_renamed$CONVECTIVE_RAINFALL)
summary(new_renamed$LARGE_SCALE_SNOWFALL)
summary(new_renamed$CONVECTIVE_SNOWFALL)
summary(new_renamed$HIGH_CLOUD_AMOUNT)
summary(new_renamed$MEDIUM_CLOUD_AMOUNT)
summary(new_renamed$LOW_CLOUD_AMOUNT)
summary(new_renamed$Mean_Output)
```



Renaming the dataset 
```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5log.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")

colnames(new_renamed)
```

Bivariate analysis
```{r message=FALSE,warning=FALSE ,fig.keep='all'}
dataset <- read.csv("D:/dissertation/meandf csv/test5renamed.csv")
ggplot(dataset, aes(x = U_COMPNT_OF_WIND, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "U_COMPNT_OF_WIND vs Mean_Output ", x = "U_COMPNT_OF_WIND", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = v_COMPNT_OF_WIND, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "v_COMPNT_OF_WIND vs Mean_Output ", x = "v_COMPNT_OF_WIND", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = W_COMPNT_OF_WIND, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "W_COMPNT_OF_WIND vs Mean_Output ", x = "W_COMPNT_OF_WIND", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = XCOMP_OF_SURF, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "XCOMP_OF_SURF vs Mean_Output ", x = "XCOMP_OF_SURF", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = YCOMP_OF_SURF, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "YCOMP_OF_SURF vs Mean_Output ", x = "YCOMP_OF_SURF", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = HEAT_FLUX, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "HEAT_FLUX vs Mean_Output ", x = "HEAT_FLUX", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = PRESSURE_SEA, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "PRESSURE_SEA vs Mean_Output ", x = "PRESSURE_SEA", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = SURFACE_PRESSURE, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "SURFACE_PRESSURE vs Mean_Output ", x = "SURFACE_PRESSURE", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = TEMP, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "TEMP vs Mean_Output ", x = "TEMP", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = BOUNDARY_LAYER_DEPTH, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "BOUNDARY_LAYER_DEPTH vs Mean_Output ", x = "BOUNDARY_LAYER_DEPTH", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = ROUGHNESS, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "ROUGHNESS vs Mean_Output ", x = "ROUGHNESS", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = LOWEST_CONV_CLOUD, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "LOWEST_CONV_CLOUD vs Mean_Output ", x = "LOWEST_CONV_CLOUD", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = PRESSURE_AT_LOWEST_CONV_BASE, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "PRESSURE_AT_LOWEST_CONV_BASE vs Mean_Output ", x = "PRESSURE_AT_LOWEST_CONV_BASE", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = PRESSURE_AT_LOWEST_CONV_TOP, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "PRESSURE_AT_LOWEST_CONV_TOP vs Mean_Output ", x = "PRESSURE_AT_LOWEST_CONV_TOP", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = LARGE_SCALE_RAINFALL, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "LARGE_SCALE_RAINFALL vs Mean_Output ", x = "LARGE_SCALE_RAINFALL", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = CONVECTIVE_RAINFALL, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "CONVECTIVE_RAINFALL vs Mean_Output ", x = "CONVECTIVE_RAINFALL", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = LARGE_SCALE_SNOWFALL, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "LARGE_SCALE_SNOWFALL vs Mean_Output ", x = "LARGE_SCALE_SNOWFALL", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = CONVECTIVE_SNOWFALL, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "CONVECTIVE_SNOWFALL vs Mean_Output ", x = "CONVECTIVE_SNOWFALL", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = HIGH_CLOUD_AMOUNT, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "HIGH_CLOUD_AMOUNT vs Mean_Output ", x = "HIGH_CLOUD_AMOUNT", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = MEDIUM_CLOUD_AMOUNT, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "MEDIUM_CLOUD_AMOUNT vs Mean_Output ", x = "MEDIUM_CLOUD_AMOUNT", y = "Mean_Output") +
  theme_minimal()

ggplot(dataset, aes(x = LOW_CLOUD_AMOUNT, y = Mean_Output)) +
  geom_point(color = "blue", shape = 19) +
  labs(title = "LOW_CLOUD_AMOUNT vs Mean_Output ", x = "LOW_CLOUD_AMOUNT", y = "Mean_Output") +
  theme_minimal()

```


Trying out models


lm model with datset meanlog renamed
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5log.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")

colnames(new_renamed)

#write.csv(new_renamed,"D:/dissertation/meandf csv/renamedlog.csv",row.names = FALSE)

model_lm <- lm(Mean_Output ~ U_COMPNT_OF_WIND+v_COMPNT_OF_WIND+W_COMPNT_OF_WIND+
XCOMP_OF_SURF+YCOMP_OF_SURF+HEAT_FLUX+
PRESSURE_SEA+SURFACE_PRESSURE+TEMP+
BOUNDARY_LAYER_DEPTH+LOWEST_CONV_CLOUD+PRESSURE_AT_LOWEST_CONV_BASE+
PRESSURE_AT_LOWEST_CONV_TOP+LARGE_SCALE_RAINFALL+
CONVECTIVE_RAINFALL+HIGH_CLOUD_AMOUNT+
MEDIUM_CLOUD_AMOUNT+LOW_CLOUD_AMOUNT, data =new_renamed)

summary(model_lm)
predict(model_lm)
predicted_values <- predict(model_lm)





#95 % confidence interval

# Get the predicted values and 95% confidence intervals from the model
predictions <- predict(model_lm, newdata = new_renamed, interval = "confidence", level = 0.95)

# Create a data frame with actual, predicted, and confidence interval values
results <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predictions[, 1],
  Lower_CI = predictions[, 2],
  Upper_CI = predictions[, 3]
)

# Create a plot with error bars representing the confidence intervals
ggplot(results, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval for Predicted Values") +
  theme_minimal()

AIC(model_lm)

```


```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
actual_values <- new_renamed$Mean_Output
# Get the predicted values from the linear regression model
predicted_values <- predict(model_lm)
# Calculate the residuals
residuals <- actual_values - predicted_values

# Test if residuals are close to zero
# You can use a threshold value to check if residuals are sufficiently close to zero
threshold <- 0.001  # You can adjust this value based on your needs

# Check if all residuals are within the threshold
if (all(abs(residuals) < threshold)) {
  cat("The predicted and actual values are similar within the threshold.")
} else {
  cat("The predicted and actual values differ significantly.")
}

# Calculate Mean Squared Error (MSE)
mse <- mean((actual_values - predicted_values)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Print the evaluation metrics

cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("R-squared (R2):", r_squared, "\n")





```

In the context of a linear regression model, there is no notion of "correctly predicted" or "incorrectly predicted" since the output is a continuous value, and the goal is to minimize the prediction error. However, if you have a specific threshold or criteria for considering a prediction as correct or incorrect (e.g., predicting whether a value falls within a certain range), you can transform the regression problem into a classification problem and then calculate the accuracy.

For example, let's say you want to classify the predictions as "correct" if the absolute difference between the predicted and actual values is less than a certain threshold (e.g., 5 units). Here's how you can calculate the percentage of correctly predicted values in this case:


```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
actual_values
# Define a threshold for considering predictions as correct
threshold <- 0.5
# Create a logical vector indicating whether each prediction is correct or not
correctly_predicted <- abs(actual_values - predicted_values) < threshold

# Calculate the percentage of correctly predicted values
percentage_correct <- mean(correctly_predicted) * 100

# Print the percentage of correctly predicted values
cat("Percentage of Correctly Predicted Values:", percentage_correct, "%\n")
```
model 2 with lm model



```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5log.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")


model_lm2 <- lm(Mean_Output ~ I(U_COMPNT_OF_WIND+ v_COMPNT_OF_WIND)+
(U_COMPNT_OF_WIND^2)+(W_COMPNT_OF_WIND^2)+
(U_COMPNT_OF_WIND*v_COMPNT_OF_WIND)+U_COMPNT_OF_WIND+W_COMPNT_OF_WIND+XCOMP_OF_SURF+YCOMP_OF_SURF+HEAT_FLUX+PRESSURE_SEA+SURFACE_PRESSURE+TEMP+BOUNDARY_LAYER_DEPTH+LOWEST_CONV_CLOUD+PRESSURE_AT_LOWEST_CONV_BASE+
PRESSURE_AT_LOWEST_CONV_TOP+LARGE_SCALE_RAINFALL+
CONVECTIVE_RAINFALL+HIGH_CLOUD_AMOUNT+MEDIUM_CLOUD_AMOUNT+LOW_CLOUD_AMOUNT, data =new_renamed)
  

summary(model_lm2)
predict(model_lm2)
predicted_values <- predict(model_lm2)





#95 % confidence interval

# Get the predicted values and 95% confidence intervals from the model
predictions <- predict(model_lm2, newdata = new_renamed, interval = "confidence", level = 0.95)

# Create a data frame with actual, predicted, and confidence interval values
results <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predictions[, 1],
  Lower_CI = predictions[, 2],
  Upper_CI = predictions[, 3]
)

# Create a plot with error bars representing the confidence intervals
ggplot(results, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval for Predicted Values") +
  theme_minimal()

AIC(model_lm2)            

actual_values <- new_renamed$Mean_Output
# Get the predicted values from the linear regression model
predicted_values <- predict(model_lm2)
# Calculate the residuals
residuals <- actual_values - predicted_values

# Test if residuals are close to zero
# You can use a threshold value to check if residuals are sufficiently close to zero
threshold <- 0.001  # You can adjust this value based on your needs

# Check if all residuals are within the threshold
if (all(abs(residuals) < threshold)) {
  cat("The predicted and actual values are similar within the threshold.")
} else {
  cat("The predicted and actual values differ significantly.")
}

# Calculate Mean Squared Error (MSE)
mse <- mean((actual_values - predicted_values)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Print the evaluation metrics

cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("R-squared (R2):", r_squared, "\n")


actual_values
# Define a threshold for considering predictions as correct
threshold <- 0.5
# Create a logical vector indicating whether each prediction is correct or not
correctly_predicted <- abs(actual_values - predicted_values) < threshold

# Calculate the percentage of correctly predicted values
percentage_correct <- mean(correctly_predicted) * 100

# Print the percentage of correctly predicted values
cat("Percentage of Correctly Predicted Values:", percentage_correct, "%\n")
```

model 3 with lm

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5log.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")


model_lm3 <- lm(Mean_Output ~ I(U_COMPNT_OF_WIND+ v_COMPNT_OF_WIND)+
(U_COMPNT_OF_WIND^2)+(W_COMPNT_OF_WIND^2)+(U_COMPNT_OF_WIND*v_COMPNT_OF_WIND)+U_COMPNT_OF_WIND+W_COMPNT_OF_WIND+XCOMP_OF_SURF+YCOMP_OF_SURF+HEAT_FLUX+
PRESSURE_SEA+SURFACE_PRESSURE+TEMP+
BOUNDARY_LAYER_DEPTH+LOWEST_CONV_CLOUD+PRESSURE_AT_LOWEST_CONV_BASE+
PRESSURE_AT_LOWEST_CONV_TOP+LARGE_SCALE_RAINFALL+CONVECTIVE_RAINFALL+HIGH_CLOUD_AMOUNT+MEDIUM_CLOUD_AMOUNT+LOW_CLOUD_AMOUNT, data =new_renamed)

summary(model_lm3)
predict(model_lm3)
predicted_values <- predict(model_lm3)





#95 % confidence interval

# Get the predicted values and 95% confidence intervals from the model
predictions <- predict(model_lm3, newdata = new_renamed, interval = "confidence", level = 0.95)

# Create a data frame with actual, predicted, and confidence interval values
results <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predictions[, 1],
  Lower_CI = predictions[, 2],
  Upper_CI = predictions[, 3]
)

# Create a plot with error bars representing the confidence intervals
ggplot(results, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval for Predicted Values") +
  theme_minimal()

AIC(model_lm3)            

actual_values <- new_renamed$Mean_Output
# Get the predicted values from the linear regression model
predicted_values <- predict(model_lm3)
# Calculate the residuals
residuals <- actual_values - predicted_values

# Test if residuals are close to zero
# You can use a threshold value to check if residuals are sufficiently close to zero
threshold <- 0.001  # You can adjust this value based on your needs

# Check if all residuals are within the threshold
if (all(abs(residuals) < threshold)) {
  cat("The predicted and actual values are similar within the threshold.")
} else {
  cat("The predicted and actual values differ significantly.")
}

# Calculate Mean Squared Error (MSE)
mse <- mean((actual_values - predicted_values)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Print the evaluation metrics

cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("R-squared (R2):", r_squared, "\n")


```
GLM model 1
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
mod_glm = glm(Mean_Output ~ U_COMPNT_OF_WIND + v_COMPNT_OF_WIND + W_COMPNT_OF_WIND + HEAT_FLUX +
                XCOMP_OF_SURF + YCOMP_OF_SURF + TEMP + BOUNDARY_LAYER_DEPTH + LOWEST_CONV_CLOUD + LARGE_SCALE_RAINFALL +
                HIGH_CLOUD_AMOUNT + MEDIUM_CLOUD_AMOUNT + LOW_CLOUD_AMOUNT, data = new_renamed)

# Display summary of the model
summary(mod_glm)

# metric of evaluation
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GLM model
predicted_values <- predict(mod_glm)

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Get the AIC for the GLM model
aic <- AIC(mod_glm)

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("AIC:", aic, "\n")


# 1. Residual Plot
residuals_glm <- resid(mod_glm)
ggplot(data.frame(residuals = residuals_glm), aes(x = 1:length(residuals), y = residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red") +
  labs(title = "Residual Plot", x = "Observation", y = "Residuals")

# 2. Q-Q Plot
qqnorm(residuals_glm, main = "Q-Q Plot")
#qqline(residuals_glm)

# 3. Fitted vs. Residuals Plot
fitted_values <- fitted(mod_glm)
ggplot(data.frame(fitted = fitted_values, residuals = residuals_glm), aes(x = fitted, y = residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red") +
  labs(title = "Fitted vs. Residuals Plot", x = "Fitted Values", y = "Residuals")

# 4. Cook's Distance Plot
cooksd <- cooks.distance(mod_glm)
ggplot(data.frame(cooksd), aes(x = 1:length(cooksd), y = cooksd)) +
  geom_point() +
  geom_hline(yintercept = 4/length(cooksd), color = "red", linetype = "dashed") +
  labs(title = "Cook's Distance Plot", x = "Observation", y = "Cook's Distance")

```



GLM model 2
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
mod_glm2 <- glm(Mean_Output ~ U_COMPNT_OF_WIND+v_COMPNT_OF_WIND+W_COMPNT_OF_WIND+ I(U_COMPNT_OF_WIND*v_COMPNT_OF_WIND),data = new_renamed, family = gaussian() )
summary(mod_glm2)

# metric of evaluation
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GLM model
predicted_values <- predict(mod_glm2)

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Get the AIC for the GLM model
aic <- AIC(mod_glm2)

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("AIC:", aic, "\n")


# 1. Residual Plot
residuals_glm <- resid(mod_glm2)
ggplot(data.frame(residuals = residuals_glm), aes(x = 1:length(residuals), y = residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red") +
  labs(title = "Residual Plot", x = "Observation", y = "Residuals")

# 2. Q-Q Plot
qqnorm(residuals_glm, main = "Q-Q Plot")
#qqline(residuals_glm)

# 3. Fitted vs. Residuals Plot
fitted_values <- fitted(mod_glm2)
ggplot(data.frame(fitted = fitted_values, residuals = residuals_glm), aes(x = fitted, y = residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red") +
  labs(title = "Fitted vs. Residuals Plot", x = "Fitted Values", y = "Residuals")

# 4. Cook's Distance Plot
cooksd <- cooks.distance(mod_glm2)
ggplot(data.frame(cooksd), aes(x = 1:length(cooksd), y = cooksd)) +
  geom_point() +
  geom_hline(yintercept = 4/length(cooksd), color = "red", linetype = "dashed") +
  labs(title = "Cook's Distance Plot", x = "Observation", y = "Cook's Distance")


```




log renamed with GAM model

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
library(mgcv)
mod_gam1 = gam(Mean_Output ~ U_COMPNT_OF_WIND + v_COMPNT_OF_WIND +W_COMPNT_OF_WIND+ HEAT_FLUX+
                XCOMP_OF_SURF+YCOMP_OF_SURF+TEMP+BOUNDARY_LAYER_DEPTH+
                ROUGHNESS+LOWEST_CONV_CLOUD+ LARGE_SCALE_RAINFALL+
                HIGH_CLOUD_AMOUNT+MEDIUM_CLOUD_AMOUNT+ LOW_CLOUD_AMOUNT, data = new_renamed)
summary(mod_gam1)
AIC(mod_gam1)


# Get the predicted values and 95% confidence intervals from the GAM model
predictions <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predict(mod_gam1, type = "response", se.fit = TRUE)$fit,
  Lower_CI = predict(mod_gam1, type = "response", se.fit = TRUE)$fit - 1.96 * predict(mod_gam1, type = "response", se.fit = TRUE)$se.fit,
  Upper_CI = predict(mod_gam1, type = "response", se.fit = TRUE)$fit + 1.96 * predict(mod_gam1, type = "response", se.fit = TRUE)$se.fit
)

# Create a plot with error bars representing the 95% confidence intervals
ggplot(predictions, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval of Actual vs. Predicted") +
  theme_minimal()

# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam1, type = "response")

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")


```





In this plot, the actual values are represented on the x-axis, and the predicted values are represented on the y-axis. The points represent the actual vs. predicted values, and the error bars around the points represent the 95% confidence intervals for the predicted values.

The dashed blue line represents a 1:1 reference line, where points on this line indicate perfect predictions (actual equals predicted).

This visualization allows you to see how well the model's predictions align with the actual values and gives an idea of the uncertainty around the predicted values due to the confidence intervals. If the actual vs. predicted points closely follow the 1:1 line, it indicates that the model's predictions are accurate. Wider confidence intervals indicate higher uncertainty in the predictions.

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
# Assuming you have the ggplot2 library installed, if not, install it using:
# install.packages("ggplot2")
library(ggplot2)

# Assuming you have the "predictions" data frame already created with actual, predicted, lower CI, and upper CI values
# If not, please create the data frame as shown in your previous code.

# Create a ggplot for visualization
ggplot(predictions, aes(x = Actual, y = Predicted)) +
  geom_point() +                           # Plot the actual vs. predicted values as points
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +  # Add error bars for confidence intervals
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Add a 1:1 line for reference
  labs(x = "Actual Values", y = "Predicted Values", title = "Actual vs. Predicted Values with 95% Confidence Intervals") +
  theme_minimal()

```

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam1, type = "response")

# Define a threshold for considering predictions as correct
threshold <- 0.5

# Create a logical vector indicating whether each prediction is correct or not
correct_predictions <- abs(actual_values - predicted_values) <= threshold

# Count the number of correct predictions
num_correct_predictions <- sum(correct_predictions)

# Calculate the percentage of correct predictions
percentage_correct <- (num_correct_predictions / length(actual_values)) * 100

# Print the results
cat("Number of Correct Predictions:", num_correct_predictions, "\n")
cat("Percentage of Correct Predictions:", percentage_correct, "%\n")

```
model number 2 for GAM

```{r message=FALSE,warning=FALSE,fig.keep='none' ,results='hide'}
mod_gam2 = gam(Mean_Output ~  U_COMPNT_OF_WIND*v_COMPNT_OF_WIND+I(U_COMPNT_OF_WIND^2), data = new_renamed,method = "REML")
summary(mod_gam2)

summary(mod_gam2)
AIC(mod_gam2)


# Get the predicted values and 95% confidence intervals from the GAM model
predictions <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predict(mod_gam2, type = "response", se.fit = TRUE)$fit,
  Lower_CI = predict(mod_gam2, type = "response", se.fit = TRUE)$fit - 1.96 * predict(mod_gam2, type = "response", se.fit = TRUE)$se.fit,
  Upper_CI = predict(mod_gam2, type = "response", se.fit = TRUE)$fit + 1.96 * predict(mod_gam2, type = "response", se.fit = TRUE)$se.fit
)

# Create a plot with error bars representing the 95% confidence intervals
ggplot(predictions, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval of Actual vs. Predicted") +
  theme_minimal()
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam2, type = "response")

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")

# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam2, type = "response")

# Define a threshold for considering predictions as correct
threshold <- 0.5

# Create a logical vector indicating whether each prediction is correct or not
correct_predictions <- abs(actual_values - predicted_values) <= threshold

# Count the number of correct predictions
num_correct_predictions <- sum(correct_predictions)

# Calculate the percentage of correct predictions
percentage_correct <- (num_correct_predictions / length(actual_values)) * 100

# Print the results
cat("Number of Correct Predictions:", num_correct_predictions, "\n")
cat("Percentage of Correct Predictions:", percentage_correct, "%\n")


```

model number 3 for gam model
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
mod_gam3 = gam(Mean_Output ~  I(U_COMPNT_OF_WIND+ v_COMPNT_OF_WIND+W_COMPNT_OF_WIND)+
  XCOMP_OF_SURF+YCOMP_OF_SURF+HEAT_FLUX+
  PRESSURE_SEA+SURFACE_PRESSURE+TEMP+
  BOUNDARY_LAYER_DEPTH+ROUGHNESS+
  LOWEST_CONV_CLOUD+PRESSURE_AT_LOWEST_CONV_BASE+
  PRESSURE_AT_LOWEST_CONV_TOP+LARGE_SCALE_RAINFALL+
  CONVECTIVE_RAINFALL+LARGE_SCALE_SNOWFALL+
  CONVECTIVE_SNOWFALL+HIGH_CLOUD_AMOUNT+
  MEDIUM_CLOUD_AMOUNT+LOW_CLOUD_AMOUNT, data = new_renamed,method = "REML")
summary(mod_gam3)

summary(mod_gam3)
AIC(mod_gam3)


# Get the predicted values and 95% confidence intervals from the GAM model
predictions <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predict(mod_gam3, type = "response", se.fit = TRUE)$fit,
  Lower_CI = predict(mod_gam3, type = "response", se.fit = TRUE)$fit - 1.96 * predict(mod_gam3, type = "response", se.fit = TRUE)$se.fit,
  Upper_CI = predict(mod_gam3, type = "response", se.fit = TRUE)$fit + 1.96 * predict(mod_gam3, type = "response", se.fit = TRUE)$se.fit
)

# Create a plot with error bars representing the 95% confidence intervals
ggplot(predictions, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval of Actual vs. Predicted") +
  theme_minimal()
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam3, type = "response")

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")

# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam3, type = "response")

# Define a threshold for considering predictions as correct
threshold <- 0.5

# Create a logical vector indicating whether each prediction is correct or not
correct_predictions <- abs(actual_values - predicted_values) <= threshold

# Count the number of correct predictions
num_correct_predictions <- sum(correct_predictions)

# Calculate the percentage of correct predictions
percentage_correct <- (num_correct_predictions / length(actual_values)) * 100

# Print the results
cat("Number of Correct Predictions:", num_correct_predictions, "\n")
cat("Percentage of Correct Predictions:", percentage_correct, "%\n")


```

Logistic regression
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
df <- read.csv("D:/dissertation/meandf csv/onezero_na_re.csv")
# Fit the logistic regression model
model <- glm(Mean_Output_loc ~ ., data = df, family = binomial)
summary(model)
AIC(model)
new_data <- df[35:54,1:10]
ggpairs(new_data)
predicted_probs <- predict(model, newdata = new_data, type = "response")
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)
comparison_result <- df$Mean_Output_loc == predicted_classes
print(comparison_result)
df_new <- df$Mean_Output_loc[35:54]
comparison_result <- df_new == predicted_classes
print(mean(comparison_result)*100)

#brier_score_manual <- mean((predicted_probs - test_data$Mean_Output)^2)
#print(paste("Brier Score (Manual):", brier_score_manual))

# Residual Plot
residuals <- residuals(model)
ggplot(data.frame(Residuals = residuals), aes(x = fitted(model), y = Residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  ggtitle("Residual Plot") +
  xlab("Fitted Values") +
  ylab("Residuals")

# QQ Plot
qqnorm(residuals)
qqline(residuals)

# Fitted vs. Residual Plot
fitted_values <- fitted(model)
ggplot(data.frame(Fitted = fitted_values, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  ggtitle("Fitted vs. Residual Plot") +
  xlab("Fitted Values") +
  ylab("Residuals")


# Cook's Distance Plot
cooksd <- cooks.distance(model)
plot(cooksd, pch = "*", cex = 2, main = "Cook's Distance Plot")
abline(h = 4*mean(cooksd), col = "red")
text(x = 1:length(cooksd), y = cooksd, labels = ifelse(cooksd > 4*mean(cooksd), names(cooksd), ""), col = "red")





```


This is not effective as we choose just fit the model and predicted with the whole data set


```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
#Taking a random location for test and train  all done on log data
# Set a seed for reproducibility
set.seed(1234)

# Randomly select 34 locations for the model and the remaining locations for prediction
model_indices <- sample(1:nrow(df), 34)
length(model_indices)
#prediction_indices <- setdiff(1:nrow(df), model_indices)

# Create a logical vector to filter the model data
is_model <- 1:nrow(df) %in% model_indices
length(is_model)

# Split the data into training (model) and testing (prediction) sets
train_data <- df[is_model, ]
test_data <- df[!is_model, ]
length(train_data)
length(test_data)

# Create a logistic regression model using the training data
model <- glm(Mean_Output_loc ~ ., data = train_data, family = binomial)

# Predict probabilities for the test data
predicted_probs <- predict(model, newdata = test_data, type = "response")

# Convert probabilities to predicted classes (0 or 1) using a threshold of 0.5
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)

# Compare the predicted classes with the actual classes in the test_data
comparison_result <- test_data$Mean_Output_loc == predicted_classes

# Calculate and print the percentage of correct predictions
accuracy_percentage <- mean(comparison_result) * 100
print(paste("Percentage of Correct Predictions:", accuracy_percentage, "%"))
brier_score_manual <- mean((predicted_probs - test_data$Mean_Output_loc)^2)
print(paste("Brier Score (Manual):", brier_score_manual))

# Calculate Mean Squared Error (MSE)
mse <- mean((test_data$Mean_Output_loc - predicted_classes)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Print the RMSE
print(paste("Root Mean Squared Error (RMSE):", rmse))




#####
# Calculate ROC curve
roc_obj <- roc(test_data$Mean_Output_loc, predicted_probs)

# Calculate AUC-ROC
auc_value <- auc(roc_obj)
auc_value

# Plot ROC curve
plot(roc_obj, main = "ROC Curve for Logistic Regression Model", print.auc = TRUE)
# Residual Plot
residuals <- residuals(model)
ggplot(data.frame(Residuals = residuals), aes(x = fitted(model), y = Residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  ggtitle("Residual Plot") +
  xlab("Fitted Values") +
  ylab("Residuals")

# QQ Plot
qqnorm(residuals)
qqline(residuals)

# Fitted vs. Residual Plot
fitted_values <- fitted(model)
ggplot(data.frame(Fitted = fitted_values, Residuals = residuals), aes(x = Fitted, y = Residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  ggtitle("Fitted vs. Residual Plot") +
  xlab("Fitted Values") +
  ylab("Residuals")


# Cook's Distance Plot
cooksd <- cooks.distance(model)
plot(cooksd, pch = "*", cex = 2, main = "Cook's Distance Plot")
abline(h = 4*mean(cooksd), col = "red")
text(x = 1:length(cooksd), y = cooksd, labels = ifelse(cooksd > 4*mean(cooksd), names(cooksd), ""), col = "red")

```


```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
set.seed(12345)

# Randomly select 34 locations for the model and the remaining locations for prediction
model_indices <- sample(1:nrow(df), 45)
#prediction_indices <- setdiff(1:nrow(df), model_indices)

# Create a logical vector to filter the model data
is_model <- 1:nrow(df) %in% model_indices

# Split the data into training (model) and testing (prediction) sets
train_data <- df[is_model, ]
test_data <- df[!is_model, ]

# Create a logistic regression model using the training data
model <- glm(Mean_Output_loc ~ ., data = train_data, family = binomial)

# Predict probabilities for the test data
predicted_probs <- predict(model, newdata = test_data, type = "response")

# Convert probabilities to predicted classes (0 or 1) using a threshold of 0.5
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)

# Compare the predicted classes with the actual classes in the test_data
comparison_result <- test_data$Mean_Output_loc == predicted_classes

# Calculate and print the percentage of correct predictions
accuracy_percentage <- mean(comparison_result) * 100
print(paste("Percentage of Correct Predictions:", accuracy_percentage, "%"))
brier_score_manual <- mean((predicted_probs - test_data$Mean_Output_loc)^2)
print(paste("Brier Score (Manual):", brier_score_manual))

# Calculate Mean Squared Error (MSE)
mse <- mean((test_data$Mean_Output_loc - predicted_classes)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Print the RMSE
print(paste("Root Mean Squared Error (RMSE):", rmse))



#####
# Calculate ROC curve
roc_obj <- roc(test_data$Mean_Output_loc, predicted_probs)

# Calculate AUC-ROC
auc_value <- auc(roc_obj)
auc_value

# Plot ROC curve
plot(roc_obj, main = "ROC Curve for Logistic Regression Model", print.auc = TRUE)


```

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
set.seed(12345)

# Randomly select 42 locations for the model and the remaining locations for prediction
model_indices <- sample(1:nrow(df), 42)
length(model_indices)


# Create a logical vector to filter the model data
is_model <- 1:nrow(df) %in% model_indices

# Split the data into training (model) and testing (prediction) sets
train_data <- df[is_model, ]
test_data <- df[!is_model, ]
length(train_data)
length(test_data)

# Create a logistic regression model using the training data
model <- glm(Mean_Output_loc ~ ., data = train_data, family = binomial)

# Predict probabilities for the test data
predicted_probs <- predict(model, newdata = test_data, type = "response")

# Convert probabilities to predicted classes (0 or 1) using a threshold of 0.5
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)
length(predicted_classes)
# Compare the predicted classes with the actual classes in the test_data
comparison_result <- test_data$Mean_Output_loc == predicted_classes

# Calculate and print the percentage of correct predictions
accuracy_percentage <- mean(comparison_result) * 100
print(paste("Percentage of Correct Predictions:", accuracy_percentage, "%"))


# Calculate Mean Squared Error (MSE)
mse <- mean((test_data$Mean_Output_loc - predicted_classes)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Print the RMSE
print(paste("Root Mean Squared Error (RMSE):", rmse))







#####
# Calculate ROC curve
roc_obj <- roc(test_data$Mean_Output_loc, predicted_probs)

# Calculate AUC-ROC
auc_value <- auc(roc_obj)
auc_value

# Plot ROC curve
plot(roc_obj, main = "ROC Curve for Logistic Regression Model", print.auc = TRUE)


# Calculate Brier score
# Calculate Brier score manually
brier_score_manual <- mean((predicted_probs - test_data$Mean_Output_loc)^2)
print(paste("Brier Score (Manual):", brier_score_manual))




```



#########################################
selecting mean of the values without the log ie csv file test 5
##########################################

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")

colnames(new_renamed)

#write.csv(new_renamed,"D:/dissertation/meandf csv/renamedlog.csv",row.names = FALSE)

model_lm <- lm(Mean_Output ~ U_COMPNT_OF_WIND+v_COMPNT_OF_WIND+W_COMPNT_OF_WIND+
XCOMP_OF_SURF+YCOMP_OF_SURF+HEAT_FLUX+
PRESSURE_SEA+SURFACE_PRESSURE+TEMP+
BOUNDARY_LAYER_DEPTH+LOWEST_CONV_CLOUD+PRESSURE_AT_LOWEST_CONV_BASE+
PRESSURE_AT_LOWEST_CONV_TOP+LARGE_SCALE_RAINFALL+
CONVECTIVE_RAINFALL+HIGH_CLOUD_AMOUNT+
MEDIUM_CLOUD_AMOUNT+LOW_CLOUD_AMOUNT, data =new_renamed)

summary(model_lm)
predict(model_lm)
predicted_values <- predict(model_lm)





#95 % confidence interval

# Get the predicted values and 95% confidence intervals from the model
predictions <- predict(model_lm, newdata = new_renamed, interval = "confidence", level = 0.95)

# Create a data frame with actual, predicted, and confidence interval values
results <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predictions[, 1],
  Lower_CI = predictions[, 2],
  Upper_CI = predictions[, 3]
)

# Create a plot with error bars representing the confidence intervals
ggplot(results, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval for Predicted Values") +
  theme_minimal()

AIC(model)

actual_values <- new_renamed$Mean_Output
# Get the predicted values from the linear regression model
predicted_values <- predict(model_lm)
# Calculate the residuals
residuals <- actual_values - predicted_values

# Test if residuals are close to zero
# You can use a threshold value to check if residuals are sufficiently close to zero
threshold <- 0.001  # You can adjust this value based on your needs

# Check if all residuals are within the threshold
if (all(abs(residuals) < threshold)) {
  cat("The predicted and actual values are similar within the threshold.")
} else {
  cat("The predicted and actual values differ significantly.")
}

# Calculate Mean Squared Error (MSE)
mse <- mean((actual_values - predicted_values)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Print the evaluation metrics

cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("R-squared (R2):", r_squared, "\n")

actual_values
# Define a threshold for considering predictions as correct
threshold <- 0.5
# Create a logical vector indicating whether each prediction is correct or not
correctly_predicted <- abs(actual_values - predicted_values) < threshold

# Calculate the percentage of correctly predicted values
percentage_correct <- mean(correctly_predicted) * 100

# Print the percentage of correctly predicted values
cat("Percentage of Correctly Predicted Values:", percentage_correct, "%\n")

```

model 2 with lm
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")


model_lm2 <- lm(Mean_Output ~ I(U_COMPNT_OF_WIND+ v_COMPNT_OF_WIND)+
(U_COMPNT_OF_WIND^2)+(W_COMPNT_OF_WIND^2)+
(U_COMPNT_OF_WIND*v_COMPNT_OF_WIND)+U_COMPNT_OF_WIND+W_COMPNT_OF_WIND+XCOMP_OF_SURF+YCOMP_OF_SURF+HEAT_FLUX+PRESSURE_SEA+SURFACE_PRESSURE+TEMP+BOUNDARY_LAYER_DEPTH+LOWEST_CONV_CLOUD+PRESSURE_AT_LOWEST_CONV_BASE+
PRESSURE_AT_LOWEST_CONV_TOP+LARGE_SCALE_RAINFALL+
CONVECTIVE_RAINFALL+HIGH_CLOUD_AMOUNT+MEDIUM_CLOUD_AMOUNT+LOW_CLOUD_AMOUNT, data =new_renamed)
  

summary(model_lm2)
predict(model_lm2)
predicted_values <- predict(model_lm2)





#95 % confidence interval

# Get the predicted values and 95% confidence intervals from the model
predictions <- predict(model_lm2, newdata = new_renamed, interval = "confidence", level = 0.95)

# Create a data frame with actual, predicted, and confidence interval values
results <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predictions[, 1],
  Lower_CI = predictions[, 2],
  Upper_CI = predictions[, 3]
)

# Create a plot with error bars representing the confidence intervals
ggplot(results, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval for Predicted Values") +
  theme_minimal()

AIC(model_lm2)            

actual_values <- new_renamed$Mean_Output
# Get the predicted values from the linear regression model
predicted_values <- predict(model_lm2)
# Calculate the residuals
residuals <- actual_values - predicted_values

# Test if residuals are close to zero
# You can use a threshold value to check if residuals are sufficiently close to zero
threshold <- 0.001  # You can adjust this value based on your needs

# Check if all residuals are within the threshold
if (all(abs(residuals) < threshold)) {
  cat("The predicted and actual values are similar within the threshold.")
} else {
  cat("The predicted and actual values differ significantly.")
}

# Calculate Mean Squared Error (MSE)
mse <- mean((actual_values - predicted_values)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Print the evaluation metrics

cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("R-squared (R2):", r_squared, "\n")

actual_values
# Define a threshold for considering predictions as correct
threshold <- 0.5
# Create a logical vector indicating whether each prediction is correct or not
correctly_predicted <- abs(actual_values - predicted_values) < threshold

# Calculate the percentage of correctly predicted values
percentage_correct <- mean(correctly_predicted) * 100

# Print the percentage of correctly predicted values
cat("Percentage of Correctly Predicted Values:", percentage_correct, "%\n")
```
model 3 with lm
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")


model_lm3 <- lm(Mean_Output ~ I(U_COMPNT_OF_WIND+ v_COMPNT_OF_WIND)+
(U_COMPNT_OF_WIND^2)+(W_COMPNT_OF_WIND^2)+(U_COMPNT_OF_WIND*v_COMPNT_OF_WIND)+U_COMPNT_OF_WIND+W_COMPNT_OF_WIND+XCOMP_OF_SURF+YCOMP_OF_SURF+HEAT_FLUX+
PRESSURE_SEA+SURFACE_PRESSURE+TEMP+
BOUNDARY_LAYER_DEPTH+LOWEST_CONV_CLOUD+PRESSURE_AT_LOWEST_CONV_BASE+
PRESSURE_AT_LOWEST_CONV_TOP+LARGE_SCALE_RAINFALL+CONVECTIVE_RAINFALL+HIGH_CLOUD_AMOUNT+MEDIUM_CLOUD_AMOUNT+LOW_CLOUD_AMOUNT, data =new_renamed)

summary(model_lm3)
predict(model_lm3)
predicted_values <- predict(model_lm3)





#95 % confidence interval

# Get the predicted values and 95% confidence intervals from the model
predictions <- predict(model_lm3, newdata = new_renamed, interval = "confidence", level = 0.95)

# Create a data frame with actual, predicted, and confidence interval values
results <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predictions[, 1],
  Lower_CI = predictions[, 2],
  Upper_CI = predictions[, 3]
)

# Create a plot with error bars representing the confidence intervals
ggplot(results, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval for Predicted Values") +
  theme_minimal()

AIC(model_lm3)            

actual_values <- new_renamed$Mean_Output
# Get the predicted values from the linear regression model
predicted_values <- predict(model_lm3)
# Calculate the residuals
residuals <- actual_values - predicted_values

# Test if residuals are close to zero
# You can use a threshold value to check if residuals are sufficiently close to zero
threshold <- 0.001  # You can adjust this value based on your needs

# Check if all residuals are within the threshold
if (all(abs(residuals) < threshold)) {
  cat("The predicted and actual values are similar within the threshold.")
} else {
  cat("The predicted and actual values differ significantly.")
}

# Calculate Mean Squared Error (MSE)
mse <- mean((actual_values - predicted_values)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Print the evaluation metrics

cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("R-squared (R2):", r_squared, "\n")

```
GLM model 1
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")

mod_glm = glm(Mean_Output ~ U_COMPNT_OF_WIND + v_COMPNT_OF_WIND + W_COMPNT_OF_WIND + HEAT_FLUX +
                XCOMP_OF_SURF + YCOMP_OF_SURF + TEMP + BOUNDARY_LAYER_DEPTH + LOWEST_CONV_CLOUD + LARGE_SCALE_RAINFALL +
                HIGH_CLOUD_AMOUNT + MEDIUM_CLOUD_AMOUNT + LOW_CLOUD_AMOUNT, data = new_renamed)

# Display summary of the model
summary(mod_glm)

# metric of evaluation
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GLM model
predicted_values <- predict(mod_glm)

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Get the AIC for the GLM model
aic <- AIC(mod_glm)

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("AIC:", aic, "\n")


# 1. Residual Plot
residuals_glm <- resid(mod_glm)
ggplot(data.frame(residuals = residuals_glm), aes(x = 1:length(residuals), y = residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red") +
  labs(title = "Residual Plot", x = "Observation", y = "Residuals")

# 2. Q-Q Plot
qqnorm(residuals_glm, main = "Q-Q Plot")
#qqline(residuals_glm)

# 3. Fitted vs. Residuals Plot
fitted_values <- fitted(mod_glm)
ggplot(data.frame(fitted = fitted_values, residuals = residuals_glm), aes(x = fitted, y = residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red") +
  labs(title = "Fitted vs. Residuals Plot", x = "Fitted Values", y = "Residuals")

# 4. Cook's Distance Plot
cooksd <- cooks.distance(mod_glm)
ggplot(data.frame(cooksd), aes(x = 1:length(cooksd), y = cooksd)) +
  geom_point() +
  geom_hline(yintercept = 4/length(cooksd), color = "red", linetype = "dashed") +
  labs(title = "Cook's Distance Plot", x = "Observation", y = "Cook's Distance")
```
 glm2
 
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")
mod_glm2 <- glm(Mean_Output ~ U_COMPNT_OF_WIND+v_COMPNT_OF_WIND+W_COMPNT_OF_WIND+ I(U_COMPNT_OF_WIND*v_COMPNT_OF_WIND),data = new_renamed, family = gaussian() )
summary(mod_glm2)

# metric of evaluation
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GLM model
predicted_values <- predict(mod_glm2)

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Get the AIC for the GLM model
aic <- AIC(mod_glm2)

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")
cat("AIC:", aic, "\n")


# 1. Residual Plot
residuals_glm <- resid(mod_glm2)
ggplot(data.frame(residuals = residuals_glm), aes(x = 1:length(residuals), y = residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red") +
  labs(title = "Residual Plot", x = "Observation", y = "Residuals")

# 2. Q-Q Plot
qqnorm(residuals_glm, main = "Q-Q Plot")
#qqline(residuals_glm)

# 3. Fitted vs. Residuals Plot
fitted_values <- fitted(mod_glm2)
ggplot(data.frame(fitted = fitted_values, residuals = residuals_glm), aes(x = fitted, y = residuals)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red") +
  labs(title = "Fitted vs. Residuals Plot", x = "Fitted Values", y = "Residuals")

# 4. Cook's Distance Plot
cooksd <- cooks.distance(mod_glm2)
ggplot(data.frame(cooksd), aes(x = 1:length(cooksd), y = cooksd)) +
  geom_point() +
  geom_hline(yintercept = 4/length(cooksd), color = "red", linetype = "dashed") +
  labs(title = "Cook's Distance Plot", x = "Observation", y = "Cook's Distance")


```
 
 
 
 
test5 with GAM model

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
library(mgcv)
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")
mod_glm1 = gam(Mean_Output ~ U_COMPNT_OF_WIND + v_COMPNT_OF_WIND +W_COMPNT_OF_WIND+ HEAT_FLUX+
                XCOMP_OF_SURF+YCOMP_OF_SURF+TEMP+BOUNDARY_LAYER_DEPTH+
                ROUGHNESS+LOWEST_CONV_CLOUD+ LARGE_SCALE_RAINFALL+
                HIGH_CLOUD_AMOUNT+MEDIUM_CLOUD_AMOUNT+ LOW_CLOUD_AMOUNT, data = new_renamed)
summary(mod_glm1)
AIC(mod_glm1)


# Get the predicted values and 95% confidence intervals from the GAM model
predictions <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predict(mod_glm1, type = "response", se.fit = TRUE)$fit,
  Lower_CI = predict(mod_glm1, type = "response", se.fit = TRUE)$fit - 1.96 * predict(mod_glm1, type = "response", se.fit = TRUE)$se.fit,
  Upper_CI = predict(mod_glm1, type = "response", se.fit = TRUE)$fit + 1.96 * predict(mod_glm1, type = "response", se.fit = TRUE)$se.fit
)

# Create a plot with error bars representing the 95% confidence intervals
ggplot(predictions, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval of Actual vs. Predicted") +
  theme_minimal()

# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_glm1, type = "response")

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")


```





In this plot, the actual values are represented on the x-axis, and the predicted values are represented on the y-axis. The points represent the actual vs. predicted values, and the error bars around the points represent the 95% confidence intervals for the predicted values.

The dashed blue line represents a 1:1 reference line, where points on this line indicate perfect predictions (actual equals predicted).

This visualization allows you to see how well the model's predictions align with the actual values and gives an idea of the uncertainty around the predicted values due to the confidence intervals. If the actual vs. predicted points closely follow the 1:1 line, it indicates that the model's predictions are accurate. Wider confidence intervals indicate higher uncertainty in the predictions.

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")
# Assuming you have the ggplot2 library installed, if not, install it using:
# install.packages("ggplot2")
library(ggplot2)

# Assuming you have the "predictions" data frame already created with actual, predicted, lower CI, and upper CI values
# If not, please create the data frame as shown in your previous code.

# Create a ggplot for visualization
ggplot(predictions, aes(x = Actual, y = Predicted)) +
  geom_point() +                           # Plot the actual vs. predicted values as points
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +  # Add error bars for confidence intervals
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +  # Add a 1:1 line for reference
  labs(x = "Actual Values", y = "Predicted Values", title = "Actual vs. Predicted Values with 95% Confidence Intervals") +
  theme_minimal()

```

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_glm1, type = "response")

# Define a threshold for considering predictions as correct
threshold <- 0.5

# Create a logical vector indicating whether each prediction is correct or not
correct_predictions <- abs(actual_values - predicted_values) <= threshold

# Count the number of correct predictions
num_correct_predictions <- sum(correct_predictions)

# Calculate the percentage of correct predictions
percentage_correct <- (num_correct_predictions / length(actual_values)) * 100

# Print the results
cat("Number of Correct Predictions:", num_correct_predictions, "\n")
cat("Percentage of Correct Predictions:", percentage_correct, "%\n")

```
model number 2 for GAM

```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")
mod_gam2 = gam(Mean_Output ~  U_COMPNT_OF_WIND*v_COMPNT_OF_WIND+I(U_COMPNT_OF_WIND^2), data = new_renamed,method = "REML")
summary(mod_gam2)

summary(mod_gam2)
AIC(mod_gam2)


# Get the predicted values and 95% confidence intervals from the GAM model
predictions <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predict(mod_gam2, type = "response", se.fit = TRUE)$fit,
  Lower_CI = predict(mod_gam2, type = "response", se.fit = TRUE)$fit - 1.96 * predict(mod_gam2, type = "response", se.fit = TRUE)$se.fit,
  Upper_CI = predict(mod_gam2, type = "response", se.fit = TRUE)$fit + 1.96 * predict(mod_gam2, type = "response", se.fit = TRUE)$se.fit
)

# Create a plot with error bars representing the 95% confidence intervals
ggplot(predictions, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval of Actual vs. Predicted") +
  theme_minimal()
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam2, type = "response")

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")

# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam2, type = "response")

# Define a threshold for considering predictions as correct
threshold <- 0.5

# Create a logical vector indicating whether each prediction is correct or not
correct_predictions <- abs(actual_values - predicted_values) <= threshold

# Count the number of correct predictions
num_correct_predictions <- sum(correct_predictions)

# Calculate the percentage of correct predictions
percentage_correct <- (num_correct_predictions / length(actual_values)) * 100

# Print the results
cat("Number of Correct Predictions:", num_correct_predictions, "\n")
cat("Percentage of Correct Predictions:", percentage_correct, "%\n")


```

model number 3 for gam model
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
new <- read.csv("D:/dissertation/meandf csv/test5.csv")
data <- na.omit(new)
new_renamed <- data %>%
  rename(U_COMPNT_OF_WIND = "X2.44642857142857",
         v_COMPNT_OF_WIND = "X.0.748376623376623",
         W_COMPNT_OF_WIND = "X.0.000350886093073593",
         XCOMP_OF_SURF = "X0.00912303841991342",
         YCOMP_OF_SURF = "X.0.0118582589285714",
         HEAT_FLUX = "X.8.93939393939394",
         PRESSURE_SEA = "X101688.021645022",
         SURFACE_PRESSURE="X98489.2954545455",
         TEMP = "X285.007643398268",
         BOUNDARY_LAYER_DEPTH = "X48.5654761904762",
         ROUGHNESS = "X0.0200970885041472",
         LOWEST_CONV_CLOUD = "X0",
         PRESSURE_AT_LOWEST_CONV_BASE = "NaN.",
         PRESSURE_AT_LOWEST_CONV_TOP = "NaN..1",
         LARGE_SCALE_RAINFALL = "X0.1",
         CONVECTIVE_RAINFALL= "X0.2",
         LARGE_SCALE_SNOWFALL = "X0.3",
         CONVECTIVE_SNOWFALL = "X0.4",
         HIGH_CLOUD_AMOUNT = "X0.0206980519480519",
         MEDIUM_CLOUD_AMOUNT = "X0.5",
         LOW_CLOUD_AMOUNT = "X0.6")
mod_gam3 = gam(Mean_Output ~  I(U_COMPNT_OF_WIND+ v_COMPNT_OF_WIND+W_COMPNT_OF_WIND)+
  XCOMP_OF_SURF+YCOMP_OF_SURF+HEAT_FLUX+
  PRESSURE_SEA+SURFACE_PRESSURE+TEMP+
  BOUNDARY_LAYER_DEPTH+
  LOWEST_CONV_CLOUD+PRESSURE_AT_LOWEST_CONV_BASE+
  PRESSURE_AT_LOWEST_CONV_TOP+LARGE_SCALE_RAINFALL+
  CONVECTIVE_RAINFALL+HIGH_CLOUD_AMOUNT+
  MEDIUM_CLOUD_AMOUNT+LOW_CLOUD_AMOUNT, data = new_renamed,method = "REML")
summary(mod_gam3)

summary(mod_gam3)
AIC(mod_gam3)


# Get the predicted values and 95% confidence intervals from the GAM model
predictions <- data.frame(
  Actual = new_renamed$Mean_Output,
  Predicted = predict(mod_gam3, type = "response", se.fit = TRUE)$fit,
  Lower_CI = predict(mod_gam3, type = "response", se.fit = TRUE)$fit - 1.96 * predict(mod_gam3, type = "response", se.fit = TRUE)$se.fit,
  Upper_CI = predict(mod_gam3, type = "response", se.fit = TRUE)$fit + 1.96 * predict(mod_gam3, type = "response", se.fit = TRUE)$se.fit
)

# Create a plot with error bars representing the 95% confidence intervals
ggplot(predictions, aes(x = Actual, y = Predicted)) +
  geom_point(color = "blue", size = 3) +
  geom_errorbar(aes(ymin = Lower_CI, ymax = Upper_CI), width = 0.2) +
  geom_abline(intercept = 0, slope = 1, color = "red") +
  labs(x = "Actual Values", y = "Predicted Values",
       title = "95% Confidence Interval of Actual vs. Predicted") +
  theme_minimal()
# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam3, type = "response")

# Calculate R-squared (R2)
total_variance <- sum((actual_values - mean(actual_values))^2)
explained_variance <- sum((predicted_values - mean(actual_values))^2)
r_squared <- explained_variance / total_variance

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mean((actual_values - predicted_values)^2))

# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(actual_values - predicted_values))

# Print the evaluation metrics
cat("R-squared (R2):", r_squared, "\n")
cat("Root Mean Squared Error (RMSE):", rmse, "\n")
cat("Mean Absolute Error (MAE):", mae, "\n")

# Assuming you have the actual values of the dependent variable in a vector called "actual_values"
actual_values <- new_renamed$Mean_Output

# Get the predicted values from the GAM model
predicted_values <- predict(mod_gam2, type = "response")

# Define a threshold for considering predictions as correct
threshold <- 0.5

# Create a logical vector indicating whether each prediction is correct or not
correct_predictions <- abs(actual_values - predicted_values) <= threshold

# Count the number of correct predictions
num_correct_predictions <- sum(correct_predictions)

# Calculate the percentage of correct predictions
percentage_correct <- (num_correct_predictions / length(actual_values)) * 100

# Print the results
cat("Number of Correct Predictions:", num_correct_predictions, "\n")
cat("Percentage of Correct Predictions:", percentage_correct, "%\n")


``` 
test 5 logistic


```{r warning=FALSE,message=FALSE ,results='hide',fig.keep='none'}
df <- read.csv("D:/dissertation/meandf csv/test5logi.csv")
df$ROUGHNESS<- NULL
df$LARGE_SCALE_SNOWFALL<- NULL
df$CONVECTIVE_SNOWFALL<- NULL
colnames(df)
df$LOWEST_CONV_CLOUD<- NULL
df$LARGE_SCALE_RAINFALL <- NULL
df$CONVECTIVE_RAINFALL <- NULL
df$HIGH_CLOUD_AMOUNT <- NULL
df$MEDIUM_CLOUD_AMOUNT <- NULL
df$LOW_CLOUD_AMOUNT <- NULL


# Fit the logistic regression model
model <- glm(Mean_Output ~ ., data = df, family = binomial)
summary(model)

AIC(model)
new_data <- df[35:54,1:10]
#ggpairs(new_data)
predicted_probs <- predict(model, newdata = new_data, type = "response")
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)
comparison_result <- df$Mean_Output == predicted_classes
print(comparison_result)
df_new <- df$Mean_Output[35:54]
comparison_result <- df_new == predicted_classes
print(mean(comparison_result)*100)


mse <- mean((test_data$Mean_Output - predicted_classes)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)



# Print the RMSE
print(paste("Root Mean Squared Error (RMSE):", rmse))


# Calculate ROC curve
roc_obj <- roc(df$Mean_Output[35:54], predicted_probs)

# Calculate AUC-ROC
auc_value <- auc(roc_obj)
print(paste("AUC-ROC:", auc_value))

# Plot ROC curve
plot(roc_obj, main = "ROC Curve for Logistic Regression Model", print.auc = TRUE)

brier_score_manual <- mean((predicted_probs - test_data$Mean_Output)^2)
print(paste("Brier Score (Manual):", brier_score_manual))
```


This is not effective as we choose just fit the model and predicted with the whole data set


```{r message=FALSE,warning=FALSE,results='hide',fig.keep='none'}
#Taking a random location for test and train  all done on log data
# Set a seed for reproducibility
set.seed(12345)

# Randomly select 34 locations for the model and the remaining locations for prediction
model_indices <- sample(1:nrow(df), 34)
length(model_indices)
#prediction_indices <- setdiff(1:nrow(df), model_indices)

# Create a logical vector to filter the model data
is_model <- 1:nrow(df) %in% model_indices
length(is_model)

# Split the data into training (model) and testing (prediction) sets
train_data <- df[is_model, ]
test_data <- df[!is_model, ]
length(train_data)
length(test_data)

# Create a logistic regression model using the training data
model <- glm(Mean_Output ~ ., data = train_data, family = binomial)

# Predict probabilities for the test data
predicted_probs <- predict(model, newdata = test_data, type = "response")

# Convert probabilities to predicted classes (0 or 1) using a threshold of 0.5
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)

# Compare the predicted classes with the actual classes in the test_data
comparison_result <- test_data$Mean_Output == predicted_classes

# Calculate and print the percentage of correct predictions
accuracy_percentage <- mean(comparison_result) * 100
print(paste("Percentage of Correct Predictions:", accuracy_percentage, "%"))

# Calculate Mean Squared Error (MSE)
mse <- mean((test_data$Mean_Output - predicted_classes)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)



# Print the RMSE
print(paste("Root Mean Squared Error (RMSE):", rmse))

library(pROC)
# Calculate ROC curve
roc_obj <- roc(test_data$Mean_Output, predicted_probs)

# Plot the ROC curve
plot(roc_obj, main = "ROC Curve for Logistic Regression Model")


# Calculate ROC curve
roc_obj <- roc(test_data$Mean_Output, predicted_probs)

# Calculate AUC-ROC
auc <- auc(roc_obj)

# Print AUC-ROC
print(paste("AUC-ROC:", auc))

brier_score_manual <- mean((predicted_probs - test_data$Mean_Output)^2)
print(paste("Brier Score (Manual):", brier_score_manual))
```


```{r message=FALSE,warning=FALSE,results='hide',fig.keep='none'}
set.seed(12345)

# Randomly select 42 locations for the model and the remaining locations for prediction
model_indices <- sample(1:nrow(df), 42)
length(model_indices)


# Create a logical vector to filter the model data
is_model <- 1:nrow(df) %in% model_indices

# Split the data into training (model) and testing (prediction) sets
train_data <- df[is_model, ]
test_data <- df[!is_model, ]
length(train_data)
length(test_data)

# Create a logistic regression model using the training data
model <- glm(Mean_Output ~ ., data = train_data, family = binomial)

# Predict probabilities for the test data
predicted_probs <- predict(model, newdata = test_data, type = "response")

# Convert probabilities to predicted classes (0 or 1) using a threshold of 0.5
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)
length(predicted_classes)
# Compare the predicted classes with the actual classes in the test_data
comparison_result <- test_data$Mean_Output == predicted_classes

# Calculate and print the percentage of correct predictions
accuracy_percentage <- mean(comparison_result) * 100
print(paste("Percentage of Correct Predictions:", accuracy_percentage, "%"))


# Calculate Mean Squared Error (MSE)
mse <- mean((test_data$Mean_Output - predicted_classes)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Print the RMSE
print(paste("Root Mean Squared Error (RMSE):", rmse))

# Calculate ROC curve
roc_obj <- roc(test_data$Mean_Output, predicted_probs)

# Plot the ROC curve
plot(roc_obj, main = "ROC Curve for Logistic Regression Model")


# Calculate ROC curve
roc_obj <- roc(test_data$Mean_Output, predicted_probs)

# Calculate AUC-ROC
auc <- auc(roc_obj)

# Print AUC-ROC
print(paste("AUC-ROC:", auc))
#####
brier_score_manual <- mean((predicted_probs - test_data$Mean_Output)^2)
print(paste("Brier Score (Manual):", brier_score_manual))
```









########
modeling with max cs of a particular location
#####################
logistic 
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
df <- read.csv("D:/dissertation/meandf csv/onezeromax_na_re.csv")
df$ROUGHNESS<- NULL
df$LARGE_SCALE_SNOWFALL<- NULL
df$CONVECTIVE_SNOWFALL<- NULL
df$LOWEST_CONV_CLOUD<-NULL
df$LARGE_SCALE_RAINFALL<-NULL
df$CONVECTIVE_RAINFALL<-NULL
df$HIGH_CLOUD_AMOUNT<-NULL
df$MEDIUM_CLOUD_AMOUNT<-NULL
df$LOW_CLOUD_AMOUNT<-NULL
# Fit the logistic regression model
model <- glm(max_loc ~ ., data = df, family = binomial)
summary(model)
AIC(model)
new_data <- df[35:54,1:10]
#ggpairs(new_data)
predicted_probs <- predict(model, newdata = new_data, type = "response")
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)
comparison_result <- df$max_loc == predicted_classes
print(comparison_result)
df_new <- df$max_loc[35:54]
comparison_result <- df_new == predicted_classes
print(mean(comparison_result)*100)
```
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
#Taking a random location for test and train  all done on log data
# Set a seed for reproducibility
set.seed(2812)

# Randomly select 34 locations for the model and the remaining locations for prediction
model_indices <- sample(1:nrow(df), 34)
length(model_indices)
#prediction_indices <- setdiff(1:nrow(df), model_indices)

# Create a logical vector to filter the model data
is_model <- 1:nrow(df) %in% model_indices
length(is_model)

# Split the data into training (model) and testing (prediction) sets
train_data <- df[is_model, ]
test_data <- df[!is_model, ]
length(train_data)
length(test_data)

# Create a logistic regression model using the training data
model <- glm(max_loc ~ ., data = train_data, family = binomial)

# Predict probabilities for the test data
predicted_probs <- predict(model, newdata = test_data, type = "response")

# Convert probabilities to predicted classes (0 or 1) using a threshold of 0.5
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)

# Compare the predicted classes with the actual classes in the test_data
comparison_result <- test_data$max_loc == predicted_classes

# Calculate and print the percentage of correct predictions
accuracy_percentage <- mean(comparison_result) * 100
print(paste("Percentage of Correct Predictions:", accuracy_percentage, "%"))

brier_score_manual <- mean((predicted_probs - test_data$max_loc)^2)
print(paste("Brier Score (Manual):", brier_score_manual))


```
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
#Taking a random location for test and train  all done on log data
# Set a seed for reproducibility
set.seed(2812)

# Randomly select 34 locations for the model and the remaining locations for prediction
model_indices <- sample(1:nrow(df), 34)
length(model_indices)
#prediction_indices <- setdiff(1:nrow(df), model_indices)

# Create a logical vector to filter the model data
is_model <- 1:nrow(df) %in% model_indices
length(is_model)

# Split the data into training (model) and testing (prediction) sets
train_data <- df[is_model, ]
test_data <- df[!is_model, ]
length(train_data)
length(test_data)

# Create a logistic regression model using the training data
model <- glm(max_loc ~ ., data = train_data, family = binomial)

# Predict probabilities for the test data
predicted_probs <- predict(model, newdata = test_data, type = "response")

# Convert probabilities to predicted classes (0 or 1) using a threshold of 0.5
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)

# Compare the predicted classes with the actual classes in the test_data
comparison_result <- test_data$max_loc == predicted_classes

# Calculate and print the percentage of correct predictions
accuracy_percentage <- mean(comparison_result) * 100
print(paste("Percentage of Correct Predictions:", accuracy_percentage, "%"))
brier_score_manual <- mean((predicted_probs - test_data$max_loc)^2)
print(paste("Brier Score (Manual):", brier_score_manual))

```
```{r message=FALSE,warning=FALSE,fig.keep='none',results='hide'}
set.seed(2812)

# Randomly select 42 locations for the model and the remaining locations for prediction
model_indices <- sample(1:nrow(df), 42)
length(model_indices)


# Create a logical vector to filter the model data
is_model <- 1:nrow(df) %in% model_indices

# Split the data into training (model) and testing (prediction) sets
train_data <- df[is_model, ]
test_data <- df[!is_model, ]
length(train_data)
length(test_data)

# Create a logistic regression model using the training data
model <- glm(max_loc ~ ., data = train_data, family = binomial)

# Predict probabilities for the test data
predicted_probs <- predict(model, newdata = test_data, type = "response")

# Convert probabilities to predicted classes (0 or 1) using a threshold of 0.5
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)
length(predicted_classes)
# Compare the predicted classes with the actual classes in the test_data
comparison_result <- test_data$max_loc == predicted_classes

# Calculate and print the percentage of correct predictions
accuracy_percentage <- mean(comparison_result) * 100
print(paste("Percentage of Correct Predictions:", accuracy_percentage, "%"))


# Calculate Mean Squared Error (MSE)
mse <- mean((test_data$max_loc - predicted_classes)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Print the RMSE
print(paste("Root Mean Squared Error (RMSE):", rmse))
brier_score_manual <- mean((predicted_probs - test_data$max_loc)^2)
print(paste("Brier Score (Manual):", brier_score_manual))
#####
```

```{r warning=FALSE,message=FALSE,fig.keep='none',results='hide'}
set.seed(15)

# Randomly select 42 locations for the model and the remaining locations for prediction
model_indices <- sample(1:nrow(df), 42)
length(model_indices)


# Create a logical vector to filter the model data
is_model <- 1:nrow(df) %in% model_indices

# Split the data into training (model) and testing (prediction) sets
train_data <- df[is_model, ]
test_data <- df[!is_model, ]
length(train_data)
length(test_data)

# Create a logistic regression model using the training data
model <- glm(max_loc ~ ., data = train_data, family = binomial)

# Predict probabilities for the test data
predicted_probs <- predict(model, newdata = test_data, type = "response")

# Convert probabilities to predicted classes (0 or 1) using a threshold of 0.5
predicted_classes <- ifelse(predicted_probs >= 0.5, 1, 0)
length(predicted_classes)
# Compare the predicted classes with the actual classes in the test_data
comparison_result <- test_data$max_loc == predicted_classes

# Calculate and print the percentage of correct predictions
accuracy_percentage <- mean(comparison_result) * 100
print(paste("Percentage of Correct Predictions:", accuracy_percentage, "%"))


# Calculate Mean Squared Error (MSE)
mse <- mean((test_data$max_loc - predicted_classes)^2)

# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)

# Print the RMSE
print(paste("Root Mean Squared Error (RMSE):", rmse))

brier_score_manual <- mean((predicted_probs - test_data$max_loc)^2)
print(paste("Brier Score (Manual):", brier_score_manual))
#####
```

